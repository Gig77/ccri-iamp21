title = "iAMP21 RNA-seq"
shortName = "iAMP21"
authors = "Christian Frech"

//------------------------------------------------------------------------------------------------
//--- INCLUDED REPORTS
//------------------------------------------------------------------------------------------------

runGSEA = true
runNetwork = true
runPGE = true
runFastQC = false
runGO = true
runKegg = true
runHeatmap = true
runMutations = false
runFunct = false
runDegGeneBodyCoverage = false 

//------------------------------------------------------------------------------------------------
//--- INPUT DATA
//------------------------------------------------------------------------------------------------

inputSamples         = INPUT(path="/mnt/projects/iamp/data/anduril/samples.csv")
inputSampleGroups    = INPUT(path="/mnt/projects/iamp/data/anduril/groups.csv")
inputComparisons     = INPUT(path="/mnt/projects/iamp/data/anduril/comparisons.csv")
gtf                  = INPUT(path="/mnt/projects/iamp/data/anduril/Homo_sapiens.GRCh37.75.etv6runx1.gtf.gz")
referenceGenomeFasta = INPUT(path="/data_synology/anduril/docker-images/anduril-gsnap_2014_12_28-human_g1k_v37/db/human_g1k_v37/human_g1k_v37_etv6runx1.fasta") 
geneAnnot            = INPUT(path="/mnt/projects/iamp/data/anduril/ensembl.homo_sapiens_75_37.geneAnnotations.tsv")    // downloaded via Ensembl biomart http://feb2014.archive.ensembl.org/biomart/martview/b57730c5d3013cd648bcd2c966113d42
geneGO               = INPUT(path="/opt/moksiskaan/pipeline/exec/output/geneGO_9606.csv")                              // Gene Ontology annotations of all genes; comes with anduril-moksiskaan Docker image
enrichmentTable      = INPUT(path="/opt/moksiskaan/pipeline/exec/output/GOEnrichment_9606.csv")                        // Moksiskaan specific a priori probabilities for the Gene ontology terms; comes with anduril-moksiskaan Docker image
ensemblDb            = INPUT(path="/usr/local/share/anduril-bundles/moksiskaan/etc/ensemblHomoSapiens.properties")     // JDBC parameters for Ensembl~\cite{Flicek2008} database; comes with anduril-moksiskaan Docker image
genesetAnnotation    = INPUT(path="/mnt/projects/generic/data/ccri/geneset_annotation.tsv")                            // assigns gene sets to categories for filtering
latexHeader          = INPUT(path="/mnt/projects/iamp/scripts/anduril/latexHeader")
latexHeaderGsea      = INPUT(path="/mnt/projects/iamp/scripts/anduril/latexHeaderGsea")
latexHeaderMutation  = INPUT(path="/mnt/projects/iamp/scripts/anduril/latexHeaderMutation")

//------------------------------------------------------------------------------------------------
//--- CONSTANTS
//------------------------------------------------------------------------------------------------

qLimitExclude   = 0.3
maxNA    		= 0.90   // fraction of samples allowed to have NA values before gene is discarded
pGOEnrich       = 0.1    // minimum p-value to call a GO term enriched 

hyperlinkRuleEnsemblGeneCards = StringInput(content=
	"URL\trefCol\tvalueCol\n" +
	"http://www.ensembl.org/id/$ID$\tEnsembl\tEnsembl\n" +
	"http://www.genecards.org/cgi-bin/carddisp.pl?gene=$ID$\tGene\tGene\n"
)

//------------------------------------------------------------------------------------------------
//--- PRELUDE
//------------------------------------------------------------------------------------------------

moksiskaanInit = MoksiskaanInit(showLog='EnsemblImport,PathwayCommonsImport,PINAImport,WikiPathways')
ensemblRef = XrefLinkRule(moksiskaan = moksiskaanInit.connection, columns = "Ensembl=Ensembl", xrefTypes  = XrefType_Ensembl_gene)
rConfig = RConfigurationReport(packages = "base,csbl.go,DESeq2,igraph", sectionType = "section")
bibtexMoksiskaan = INPUT(path="/usr/local/share/anduril-bundles/moksiskaan/components/report-BibTeX/moksiskaan.bib")
bibtexSequencing = INPUT(path="/usr/local/share/anduril-bundles/sequencing/components/report-BibTeX/sequencing.bib")

@out.optOut1.filename = "Homo_sapiens.GRCh37.75.etv6runx1.runx1ex1.norRNA.gtf"
gtfNorRNA = BashEvaluate
(
	var1 = gtf,
	script = '''
		set -ex
		tmpdir=$( gettempdir )
		zcat -f @var1@ | grep -P 'gene_biotype "(rRNA|Mt_rRNA)"' | perl -ne '/(ENSG[^\"]+)/; print "$1\n"' | sort | uniq > $tmpdir/ensemblid.rrna
		zcat -f @var1@ | grep -vf $tmpdir/ensemblid.rrna > @optOut1@
	'''
)

//------------------------------------------------------------------------------------------------
//--- SAMPLES
//------------------------------------------------------------------------------------------------

samples = record()
for entry : std.itercsv(inputSamples) 
{
	samples[""+entry.ID] =
	{
		'alias' = entry.Alias,
		'description' = entry.Description,
		'file' = entry.File,
		'exclude' = false
	}
	
	if (entry.Exclude == "Yes" || entry.Exclude == "YES" || entry.Exclude == "yes") {
		samples[""+entry.ID]["exclude"] = true
	}
}

//------------------------------------------------------------------------------------------------
//--- SAMPLE GROUPS
//------------------------------------------------------------------------------------------------

removeExcludedSamples = REvaluate
(
	table1 = inputSamples,
	table2 = inputSampleGroups,
	script = StringInput(content='''
		excluded <- table1$Alias[toupper(table1$Exclude)=="YES"]
		table2$Members <- as.character(table2$Members)
		
		for (i in 1:nrow(table2)) {
		  m.old <- unlist(strsplit(table2$Members[i], ","))
		  m.new <- m.old[!m.old %in% excluded]
		  table2$Members[i] <- paste(m.new, collapse=",")
		}
		
		table.out <- table2
	''')
)
sampleGroups = removeExcludedSamples.table
sampleGroupsSimple = CSVFilter(csv=sampleGroups, regexp="ID=iAMP21|ER|DS|HD|BO|CD19")

//------------------------------------------------------------------------------------------------
//--- COMPARISONS
//------------------------------------------------------------------------------------------------

comparisons = record()
for comparison : std.itercsv(inputComparisons) 
{
	// fetch group names
	gCase    = null
	gControl = null
	for g : std.split(comparison.Members, ',')
	{
		if (gCase    == null) { gCase    = g } else
		if (gControl == null) { gControl = g } else
		std.fail("Too many groups listed for ", comparison.ID, " (", comparison.Description, "). Members = ", comparison.Members, sep='')
	}

	sampleIdLst = CSV2IDList
	(
		table1    = sampleGroups @require,
		columnIn  = "Members",
		columnOut = "Sample",
		isList    = true,
		regexp1   = "ID=(" + gCase + "|" + gControl + ")",
		@name     = "sampleIds_" + std.quote(comparison.ID, type="Anduril")
	)

	// add group record	
	comparisons[comparison.ID] = 
	{
		'caseG'       = gCase,
		'controlG'    = gControl,
		'otherG'      = comparison.NonMembers,
		'sampleIdLst' = sampleIdLst.ids,
		'sampleIds'   = std.strReplace(std.fRead(sampleIdLst.ids), "\n", ",", "^[^,]+,(.*)", "$1", ",$", ""),
		'design'      = comparison.design,
		'fcLimit'     = comparison.fcLimit,
		'pLimit'      = comparison.pLimit,
		'qLimit'      = comparison.qLimit,
		'exprLimit'   = comparison.exprLimit,
		'desc'        = comparison.Description,
		'gsea'        = comparison.GSEA
	}
}

//------------------------------------------------------------------------------------------------
//--- EXPERIMENTAL SETUP REPORT
//------------------------------------------------------------------------------------------------

include "/mnt/projects/iamp/anduril/includes/experimentalSetup.and"

experimentReport = experimentalSetupReport
(
	samples      = inputSamples,
	sampleGroups = sampleGroups,
	comparisons  = inputComparisons,
	sampleTableColumns = "ID,Alias,Subtype,Patient,Timepoint,File",
	sampleTableFormat  = "cccccl"
)

//------------------------------------------------------------------------------------------------
//--- ALIGNMENT
//------------------------------------------------------------------------------------------------

alignedBams = record()
for id, sample : samples 
{
	@out.alignment.filename = sample.alias + '.gsnap.sorted.dupmarked.bam'
	gsnap = GSNAP
	(
		reads     = INPUT(path=sample.file), 
		options   = "--db=g1k_v37_etv6runx1 --dir=/data_synology/anduril/docker-images/anduril-gsnap_2014_12_28-human_g1k_v37/db/human_g1k_v37 --use-splicing=g1k_v37.splicesites --use-snps=g1k_v37.snp138 --nthreads 15 --maxsearch=100 --npaths=1 --max-mismatches=1 --novelsplicing=0 --batch=4 --genome-unk-mismatch=0",
		docker    = "biowaste:5000/anduril/gsnap",
		inputType = "auto",
		@cpu      = 10, 
		@memory   = 40000,
		@name     = "gsnap_" + sample.alias,
		@execute  = "once" 
	)

	if (!sample.exclude) {
		alignedBams[sample.alias] = gsnap.alignment
	}
}

//------------------------------------------------------------------------------------------------
//--- EXPRESSION MATRIX
//------------------------------------------------------------------------------------------------

bamCounts  = {}
for sample, bam : alignedBams
{
	@out.optOut1.filename = sample + '.htseq.counts'
	count = BashEvaluate
	(
		var1 = bam,
		var2 = gtfNorRNA.optOut1,
		script = "htseq-count -f bam -t exon -s no @var1@ @var2@ > @optOut1@.part && mv @optOut1@.part @optOut1@",
		@name = "htseq_" + sample
	)
	bamCounts[sample] = count.optOut1
}

htseqExprMatrix = HTSeqExprMatrix
(
	samples      = Array2CSV(array=bamCounts, @name="htseq_filelist"),
	inclusionKey = ""
)

deseqExprMatrix = DESeqExpr
(
	geneCounts  = bamCounts,
    counts      = false,
    maxNA       = maxNA,
    normalized  = true,
    add1        = true
)

//------------------------------------------------------------------------------------------------
//--- QUALITY CONTROL
//------------------------------------------------------------------------------------------------

include "/mnt/projects/iamp/anduril/includes/qc.and"

qcReport  = getQCReport
(
	samples                 = samples,
	alignedBAMs             = alignedBams,
    gtf                     = gtf,
    countMatrix             = htseqExprMatrix.countArray["all"],
    force expr              = deseqExprMatrix.log2,
    force groups            = sampleGroupsSimple,
    force inputSamples      = inputSamples,
    sampleAnnotationColumns = "Subtype,Flowcell",
    includeFastQC           = false,
    readStatsYMax           = 60,
    readStatsSamplesPerRow  = 14,
    cexGeneBodyCoverage     = 0.6,
    clusterHeatmapMargins   = "6,6",
    cexClusterHeatmap       = 0.65
)

//------------------------------------------------------------------------------------------------
//--- DIFFERENTIAL GENE EXPRESSION ANALYSIS
//------------------------------------------------------------------------------------------------

gMoksisA = PiispanhiippaAnnotator(sourceKeys = deseqExprMatrix.expr @require,
                                  connection = moksiskaanInit.connection,
                                  inputDB    = XrefType_Ensembl_gene,
                                  organism   = Organism_Homo_sapiens,
                                  targetDB   = "BioentityName,DNARegion")

geneNames = CSVCleaner(original   = gMoksisA.bioAnnotation,
                       columns    = "sourceKey,BioentityName,DNARegion",
                       rename     = "sourceKey=Ensembl,BioentityName=Gene",
                       skipQuotes = "*",
                       trim       = true,
                       @keep      = true)


degAllLst  = record()        // unfiltered output of DESeq2 for each comparison
degCalledLst  = record()     // only significant DEGs for each comparison

// compute differential expression statistics with DESeq2

for ID, comparison : comparisons
{
	if (ID != "iAMPspecific") 
	{
		deseq = DESeq2
		(
			countMatrix             = htseqExprMatrix.countArray["all"],
			samples                 = inputSamples,
			force sampleGroups      = inputSampleGroups,
		    caseGroup               = comparison.caseG,
		    controlGroup            = comparison.controlG,
		    otherGroups             = comparison.otherG,
			design                  = comparison.design,
		    colSuffix               = ID,
		    minReplicatesForReplace = 5,
		    cooksCutoff             = 0.7,
		    trim                    = 0.4,
		    @name                   = "deseq_" + std.quote(ID, type="Anduril")
		)
		degAllLst[ID] = deseq.results
	
		// annotate deseq output with gene names, locations, and descriptions 
		quotedSampleIds = 'G."' + std.strReplace(comparison.sampleIds, ',', '", G."') + '"'	
		deseqAnnotated = TableQuery
		(
			table1 = deseq     @require,
			table2 = geneNames @require,
			table3 = geneAnnot @require,
			query  = '''
				SELECT G."ids"                        AS "ids",
				A."Gene"                              AS "Gene",
				SUBSTR(D."Description", 1, 65)        AS "Description",
				D."Chromosome Name"                   AS "chr",
				D."Gene Start (bp)"                   AS "start",
				D."Gene End (bp)"                     AS "end",
				CONCAT(D."Chromosome Name", D."Band") AS "Band",
				G."meanExprE'''+ID+'''"               AS "meanA",
				G."meanExprC'''+ID+'''"               AS "meanB",
				G."fc'''+ID+'''"                      AS "fc",
				G."p'''+ID+'''"                       AS "p",
				G."q'''+ID+'''"                       AS "q",
				CASEWHEN(G."fc'''+ID+'''" > 0, 1, -1) AS "status",
				'''+quotedSampleIds+'''
				FROM table1 G
					LEFT OUTER JOIN table2 AS A ON (G."ids" = A."Ensembl")
					LEFT OUTER JOIN table3 AS D ON (G."ids" = D."Ensembl Gene ID")
				ORDER BY ABS("fc") DESC, "q"
			''',
			@name  = "deseqAnnotated_" + std.quote(ID, type="Anduril")
		)
			
		// subset statistically significant DEGs
		degCalled = TableQuery
		(
			table1 = deseqAnnotated @require,
			query  = 
				"""
				SELECT DISTINCT *
				FROM   table1
					WHERE  (ABS("fc") >= """ + comparison.fcLimit + """) AND
						   ("p"       <= """ + comparison.pLimit  + """) AND
						   ("q"       <= """ + comparison.qLimit  + """) AND
						   (("meanA"  >= """ + comparison.exprLimit + """) OR
						   ( "meanB"  >= """ + comparison.exprLimit + """))
						   ORDER BY ABS("fc") DESC, "q"
				""",
				@name  = "degCalled_" + std.quote(ID, type="Anduril")
		)
		degCalledLst[ID] = degCalled.table			
	}
}

// special comparisons: simply substract one gene list from another; DESeq2 does not need to run in this case

for ID, group : comparisons
{
	if (ID == "iAMPspecific")
	{
		quotedSampleIds = 'table1."' + std.strReplace(comparisons["iAMPvsNoniAMP"].sampleIds, ',', '", table1."') + '"'	
		deseq = TableQuery
		(
			table1 = degAllLst["iAMPvsNoniAMP"] @require,
			table2 = degAllLst["ERvsDS"]  @require,
			query  = '''SELECT table1."ids"                    AS "ids",
				               table1."fciAMPvsNoniAMP"        AS "fciAMPspecific", 
				               table1."piAMPvsNoniAMP"         AS "piAMPspecific", 
				               table1."qiAMPvsNoniAMP"         AS "qiAMPspecific", 
				               table1."meanExpriAMPvsNoniAMP"  AS "meanExpriAMPspecific", 
				               table1."meanExprEiAMPvsNoniAMP" AS "meanExprEiAMPspecific", 
				               table1."meanExprCiAMPvsNoniAMP" AS "meanExprCiAMPspecific",
				               '''+quotedSampleIds+''' 
			            FROM table1 LEFT OUTER JOIN table2 ON table1."ids" = table2."ids" 
						WHERE table2."qERvsDS" IS NULL OR table2."qERvsDS" >= ''' + qLimitExclude,
			@name  = "deseq_" + std.quote(ID, type="Anduril")
		)
		degAllLst[ID] = deseq.table

		degCalled = TableQuery
		(
			table1 = degCalledLst["iAMPvsNoniAMP"] @require,
			table2 = degAllLst["ERvsDS"]  @require,
			query  = '''SELECT table1.* FROM table1 LEFT OUTER JOIN table2 ON table1."ids" = table2."ids" WHERE table2."qERvsDS" IS NULL OR table2."qERvsDS" >= ''' + qLimitExclude,
			@name  = "degCalled_" + ID
		)
		degCalledLst[ID] = degCalled.table
	} 
}

//------------------------------------------------------------------------------------------------
//--- VENN DIAGRAMS
//------------------------------------------------------------------------------------------------

degSets = CSV2SetList(tables=degCalledLst)

venn = VennDiagram
(
	sets         = degSets,
	cexSetName   = 0.3,
	cexSetSize   = 0.3,
	doWeights    = true,
	sets1        = "iAMPvsDS,iAMPvsER,ERvsDS",
	sets2        = "iAMPvsImmature,DSvsImmature,ERvsImmature",
	sets3        = "iAMPvsPreB,DSvsPreB,ERvsPreB",
	sets4        = "iAMPvsMature,DSvsMature,ERvsMature",
	sectionTitle = "Gene set comparisons",
	sectionType  = "subsection",
	types        = "circles"
)

degReportLst = record(venn=venn.report)

//------------------------------------------------------------------------------------------------
//--- DEG REPORTS
//------------------------------------------------------------------------------------------------

include "/mnt/projects/iamp/anduril/includes/degTable.and"
include "/mnt/projects/iamp/anduril/includes/degBoxPlot.and"
include "/mnt/projects/iamp/anduril/includes/goClustering.and"
include "/mnt/projects/iamp/anduril/includes/goEnrichment.and"
include "/mnt/projects/iamp/anduril/includes/expressionHeatmap.and"

deseqColumnTypes = StringInput(content="Table\tColumn\tType\ntable1\tfc\tDOUBLE\ntable1\tstatus\tINTEGER\n")  // required if degTable is empty (= no significant DEGs)

ensembl2ucsc = BashEvaluate
(
	script = """mysql -h genome-mysql.cse.ucsc.edu -u genome -D hg19 -B -A -e 'select DISTINCT g.name, g.chrom, g.txStart, g.txEnd, eg.name2 as ensembl, 0 as tmp1, g.strand, g.cdsStart, g.cdsEnd, 0 as tmp2, g.exonCount, g.exonStarts, g.exonEnds from knownGene as g, knownCanonical as c, knownToEnsembl as ke, ensGene as eg where g.name=c.transcript and g.name=ke.name and ke.value=eg.name and eg.name2 like "ENSG%";' > @optOut1@""",
	@execute = "once"
)

ensembl2ucsc4rseqc = REvaluate
(
	table1 = ensembl2ucsc.optOut1,
	script = StringInput(content=
		'''
		table.out <- table1
		table.out$chrom <- gsub("^chr", "", table.out$chrom)
		table.out$exonLengths <- apply(table.out, 1, function(x) paste(as.numeric(unlist(strsplit(x["exonEnds"], ",")))-as.numeric(unlist(strsplit(x["exonStarts"], ","))), collapse=","))
		table.out$exonOffsets <- apply(table.out, 1, function(x) paste(as.numeric(unlist(strsplit(x["exonStarts"], ",")))-as.numeric(x["txStart"]), collapse=","))
		table.out <- table.out[,!names(table.out) %in% c("name", "exonStarts", "exonEnds")]
		return(0)
		'''
	)
)		

for ID, comparison : comparisons 
{	
	//--- VOLCANO PLOT -----------------------------------------------------------------------------------------------------//

	degVolcanoPlot = VolcanoPlot
	(
		expr = degAllLst[ID],
		geneNames = geneNames,
		sigthresh = comparison.qLimit,
		lfcthresh = comparison.fcLimit,
		labelTopN = 20,
		cexLabel = 0.4,
		sampleSize = 1000,
		caption = "Scatter plot of log2 fold-changes vs. p-values (aka 'volcano plot') comparing gene expression between " + comparison.caseG + " and " + comparison.controlG + " samples.",
		sectionTitle="Volcano plot " + std.quote(ID, type="Latex"),
		sectionType="subsubsection",
		@name = "degVolcanoPlot_" + std.quote(ID, type="Anduril")
	)

	//--- TABLES WITH UP- AND DOWN-REULATED GENES --------------------------------------------------------------------------//

	degTableUp = getDEGTableReport
	(
		degs = degCalledLst[ID],
		degReportRefs = ensemblRef,
		direction = "up",
		comparison = comparison,
		ID=ID,
		design = comparison.design,
		section="Genes with higher expression in "+comparison.caseG+" than "+comparison.controlG+" samples",
		sectionType="subsubsection",
		@name = "degTableUp_" + std.quote(ID, type="Anduril")
	)

	degTableDn = getDEGTableReport
	(
		degs = degCalledLst[ID],
		degReportRefs = ensemblRef,
		direction = "down",
		comparison = comparison,
		ID=ID,
		design = comparison.design,
		section="Genes with lower expression in "+comparison.caseG+" than "+comparison.controlG+" samples",
		sectionType="subsubsection",
		@name = "degTableDn_" + std.quote(ID, type="Anduril")
	)

	//--- BOX PLOTS TOP UP- AND DOWN-REGULATED GENES ----------------------------------------------------------------------//

	degBoxplotUp = getDEGBoxPlots
	(
		degs = degCalledLst[ID],
		exprMatrix = deseqExprMatrix.log2,
		sampleGroups=inputSampleGroups,
		geneAnnot=geneAnnot,
		direction="up",
		comparison=comparison,
		labelOutliers=true,
		includeGroups="iAMP21,HD,DS,ER,BO,immature,preB,mature",
		cexGroupLabel=0.7,
		sectionType="subsubsection",
		@name = "degBoxplotUp_" + std.quote(ID, type="Anduril")
	)

	degBoxplotDn = getDEGBoxPlots
	(
		degs = degCalledLst[ID],
		exprMatrix = deseqExprMatrix.log2,
		sampleGroups=inputSampleGroups,
		geneAnnot=geneAnnot,
		direction="down",
		comparison=comparison,
		labelOutliers=true,
		includeGroups="iAMP21,HD,DS,ER,BO,immature,preB,mature",
		cexGroupLabel=0.7,
		sectionType="subsubsection",
		@name = "degBoxplotDn_" + std.quote(ID, type="Anduril")
	)

	//--- EXPRESSION HEATMAP --------------------------------------------------------------------------//

	exprHeatmap = getHeatmapReport
	(
		exprMatrix   = deseqExprMatrix.log2,
		degCalled    = degCalledLst[ID],
		geneNames    = geneNames,
		samples      = inputSamples,
		sampleGroups = sampleGroups,
		comparison   = comparison,
		sampleAnnotationNames = "Subtype",
		sectionType  = "subsubsection",
		fontSizeRow  = 2,
		fontSizeCol  = 7,
		@name        = "heatmap" + std.quote(ID, type="Anduril"),
		@enabled     = runHeatmap
	)

	//--- GO ENRICHMENT -------------------------------------------------------------------------------//

	goEnrichment = getGOEnrichmentReport
	(
		geneIds      = degCalledLst[ID],
		deseq        = degAllLst[ID],    // used to correct background gene set using only actually measured genes
		geneNames    = geneNames,
		geneGO       = geneGO,
		threshold    = pGOEnrich,
		ID           = ID,
		sectionTitle = "GO terms enriched in DEGs between " + comparison.caseG + " and " + comparison.controlG,
		sectionType  = "subsubsection",
		@name        = "goEnrichment" + std.quote(ID, type="Anduril"),
		@enabled     = runGO
	)

	//--- KEGG PATHWAYS -------------------------------------------------------------------------------//

	include "/mnt/projects/iamp/anduril/includes/keggReport.and"
	kegg = keggReport
	(
		degsCalled   = degCalledLst[ID],
		degsAll      = degAllLst[ID],
		geneNames    = geneNames,
		ID           = ID,
		sectionTitle = "KEGG pathways enriched between " + comparison.caseG + " and " + comparison.controlG,
		sectionType  = "subsubsection",
		comparison   = comparison,
		topNdiagrams = 10,
		fdrCutoff    = 0.01,
		@name        = "kegg" + std.quote(ID, type="Anduril"),
		@enabled     = runKegg
	)

	//--- GENE INTERACTION NETWORK --------------------------------------------------------------------//
	
	statusTable = TableQuery
	(
		table1   = degCalledLst[ID] @require,
		table2   = degAllLst[ID] @require,
		columnTypes = deseqColumnTypes,
		query    = '''
			SELECT "ids" AS "Ensembl", "status" FROM table1
			UNION
			SELECT T2."ids" AS "Ensembl", 1 AS "status"
			FROM   table2 T2 LEFT JOIN table1 T1 ON T2."ids" = T1."ids" 
			WHERE  T1."ids" IS NULL AND T2."meanExpr'''+ID+'''" >= 10 AND T2."q'''+ID+'''" < 0.01 AND T2."fc'''+ID+'''" >= 1
			UNION
			SELECT T2."ids" AS "Ensembl", -1 AS "status"
			FROM   table2 T2 LEFT JOIN table1 T1 ON T2."ids" = T1."ids" 
			WHERE  T1."ids" IS NULL AND T2."meanExpr'''+ID+'''" >= 10 AND T2."q'''+ID+'''" < 0.01 AND T2."fc'''+ID+'''" <= -1
			UNION
			SELECT T2."ids" AS "Ensembl", 0 AS "status"
			FROM   table2 T2 LEFT JOIN table1 T1 ON T2."ids" = T1."ids" 
			WHERE  T1."ids" IS NULL AND T2."meanExpr'''+ID+'''" >= 300 AND T2."q'''+ID+'''" >= 0.9 AND T2."fc'''+ID+'''" > -0.1 AND T2."fc'''+ID+'''" < 0.1
			UNION
			SELECT T2."ids" AS "Ensembl", -2 AS "status"
			FROM   table2 T2 LEFT JOIN table1 T1 ON T2."ids" = T1."ids" 
			WHERE  T1."ids" IS NULL AND T2."meanExpr'''+ID+'''" < 10
            ''',
		@name    = "statusTable_" + std.quote(ID, type="Anduril"),
		@enabled = runNetwork
	)
	
    network = InteractionNetwork
    (
    	force genes  = degCalledLst[ID],
		force status = statusTable,
		moksiskaan   = moksiskaanInit.connection,
		ensembl      = ensemblDb,
		organism     = Organism_Homo_sapiens,
		title        = "Interaction network of DEGs between " + comparison.caseG + " and " + comparison.controlG,
		linkTypes    = std.concat(sep=",",
			//LinkType_pathway_precedence,
			//LinkType_protein_protein_interaction,
			LinkType_chemical_reaction,
			LinkType_protein_activation,
			LinkType_protein_inhibition,
			LinkType_protein_state_change,
			LinkType_protein_binding,
			LinkType_protein_dissociation,
			LinkType_gene_expression,
			LinkType_gene_repression,
			LinkType_phosphorylation,
			LinkType_dephosphorylation,
			LinkType_glycosylation,
			LinkType_ubiquitination,
			LinkType_deubiquitination,
			LinkType_methylation,
			LinkType_demethylation,
			LinkType_acetylation,
			LinkType_deacetylation,
			LinkType_sumoylation,
			LinkType_desumoylation
		),
		annotRules        = "",
		bioentityTypes    = BioentityType_gene,
		maxGap            = 1,
		cytoscape         = false,
		useStudies        = "",
		hideGaps          = false,
		isolateGroupNames = false,
		expand            = "connected",
		statusFilter      = "NA",
		sectionType       = "subsubsection",
		@name             = "network_" + std.quote(ID, type="Anduril"),
		@enabled          = runNetwork
	)
	
	// --- GENE BODY COVERAGE -------------------------------------------------------------------------//

	degCalledUCSC = TableQuery
	(
		table1 = degCalledLst[ID],
		table2 = ensembl2ucsc4rseqc.table,
		query  = '''SELECT table2.* FROM table1, table2 WHERE table1."ids" = table2."ensembl" AND table1."fc" > 0''',
		@name  = "degCalledUCSC_" + ID
	)
	
	degGeneBodyCoverage = {}
	for sample : std.itercsv(group.sampleIdLst)
	{
		degGeneBodyCoverage[sample.Sample] = CalcGeneBodyCoverage
		(
			bam    = alignedBams[sample.Sample],
			bed    = degCalledUCSC.table,
			name   = sample.Sample,
			docker = "biowaste:5000/anduril/rseqc",
			@name  = "degGeneBodyCoverage_" + ID + "_" + sample.Sample,
			@enabled = runDegGeneBodyCoverage
		)
	}
	
	combinedGeneBodyCoverage = CSVJoin(array=degGeneBodyCoverage, useKeys=false, @name="degGeneBodyCoverage_" + ID + "_combined", @enabled = runDegGeneBodyCoverage)

	geneBodyCoveragePlot = REvaluate
	(
		table1 = combinedGeneBodyCoverage.csv,
		script = geneBodyCoveragePlotScript,
		param1 = "Gene body coverage for genes significantly up-regulated in " + ID,
		param2 = "subsubsection",
		@name  = "degGeneBodyCoveragePlot_" + ID,
		@enabled = runDegGeneBodyCoverage
	)
	
 
	//--- COMBINE REPORTS -----------------------------------------------------------------------------//

	degReportLst[ID] = LatexCombiner
	(
		array = {
			degVolcanoPlot.document,
			degTableUp, 
			degBoxplotUp,
			degTableDn, 
			degBoxplotDn, 
			exprHeatmap, 
			goEnrichment,
			kegg,
			network.report,
			geneBodyCoveragePlot.document
		},
		sectionTitle=ID, 
		sectionType="subsection"
	)
}

degReport = LatexCombiner
(
	array        = degReportLst,
	pagebreak    = true,
	tail         = '\newpage{}',
	sectionTitle = "Differentially expressed genes"
)

//------------------------------------------------------------------------------------------------
//--- DEG REPORTS OF miRNA TARGETS GENES
//------------------------------------------------------------------------------------------------

mirTargets = INPUT(path="/mnt/projects/iamp/data/miRecords/miRecords.predictedTargets.txt")
miRs = TableQuery(table1 = mirTargets, query = '''SELECT DISTINCT "miRNA ID" FROM table1''')

degReportMirLstGrp = record()
for ID, comparison : comparisons  
{
	if (ID=="iAMPvsDS" || ID=="iAMPvsER" || ID=="ERvsDS" || ID=="iAMPvsNoniAMP") 
	{	
		degReportMirLst = record()
		for miR: std.split("sa-miR-155 hsa-miR-125b hsa-miR-125a-3p")
		{ 
			instanceSuffix = ID + "_" + std.quote(miR, type="anduril")
		
			degTableMir = TableQuery
			(
				table1 = degCalledLst[ID] @require,
				table2 = mirTargets @require,
				query  = """
					SELECT * FROM table1 WHERE "Gene" IN (SELECT DISTINCT "Symbol" FROM table2 A WHERE A."miRNA ID" = '""" + miR + """')
		            """,
				@name  = "degTableMir_" + instanceSuffix
			)
			
			degTableMirUp = getDEGTableReport
			(
				degs = degTableMir,
				degReportRefs = ensemblRef,
				direction = "up",
				comparison = comparison,
				ID=ID,
				@name  = "degTableMirUp_" + instanceSuffix
			)
		
			degTableMirDn = getDEGTableReport
			(
				degs = degTableMir,
				degReportRefs = ensemblRef,
				direction = "down",
				comparison = comparison,
				ID=ID,
				@name  = "degTableMirDn_" + instanceSuffix
			)
		
			degReportMirLst[instanceSuffix] = LatexCombiner
			(
				latex1=degTableMirUp, 
				latex2=degTableMirDn, 
				sectionTitle = miR + " target genes differentially expressed comparing " + ID, 
				sectionType = "subsubsection"
			)
		}
		
		degReportMirLstGrp[ID] = LatexCombiner
		(
			array=degReportMirLst, 
			sectionTitle = ID, 
			sectionType = "subsection"
		)
		
	}
}

degReportMir = LatexCombiner
(
	array        = degReportMirLstGrp, 
	pagebreak    = true,
	tail         = '\newpage{}',
	sectionTitle = "Differentially expressed target genes of selected microRNAs", 
	sectionType  = "section"
)


//------------------------------------------------------------------------------------------------
//--- EXPRESSION BOX PLOTS OF SELECTED GENES
//------------------------------------------------------------------------------------------------

genesCRA = TableQuery(table1 = geneAnnot @require,  query  = '''SELECT "Ensembl Gene ID" AS "Ensembl" FROM table1 WHERE "Chromosome Name" = '21' AND "Gene Start (bp)" >= 33192000 AND "Gene End (bp)" <= 39796000 ORDER BY "Gene Start (bp)"''')
boxplotCRA = ExpressionBoxPlot
(
	expr   = deseqExprMatrix.log2    @require @doc="Expression matrix",
	force sampleGroups = sampleGroups,
	includeGroups = "iAMP21,HD,DS,ER,BO,immature,preB,mature",
	annotation = geneAnnot           @require @doc="Gene annotations",
	geneIds = genesCRA,
	nCol = 10,
	nRow = 12,
	height=9,
	labelOutliers=true,
	cexSampleLabel=0.3,
	cexGroupLabel=0.6,
	caption = 'Expression of genes located on chromosome 21 in common region of amplification (CRA), as defined by Strefford et al. (2006). This region extends from 33,192,000 bp to 39,796,000 bp.',
	sectionTitle="Common region of amplification (CRA)", 
	sectionType="subsection"
)

boxplotRibosomalProteins = ExpressionBoxPlot
(
	expr   = deseqExprMatrix.log2,
	force sampleGroups = sampleGroups,
	includeGroups = "iAMP21,HD,DS,ER,BO,immature,preB,mature",
	annotation = geneAnnot,
	hgnc = "RPL10,RPL10A,RPL10L,RPL11,RPL12,RPL13,RPL13A,RPL14,RPL15,RPL17,RPL18,RPL18A,RPL19,RPL21,RPL22,RPL22L1,RPL23,RPL23A,RPL24,RPL26,RPL26L1,RPL27,RPL27A,RPL28,RPL29,RPL3,RPL30,RPL31,RPL32,RPL34,RPL35,RPL35A,RPL36,RPL36A,RPL36AL,RPL37,RPL37A,RPL38,RPL39,RPL39L,RPL3L,RPL4,RPL41,RPL5,RPL6,RPL7,RPL7A,RPL7L1,RPL8,RPL9,RPLP0,RPLP1,RPLP2,RPS10,RPS11,RPS12,RPS13,RPS14,RPS15,RPS15A,RPS16,RPS17,RPS17L,RPS18,RPS19,RPS19BP1,RPS2,RPS20,RPS21,RPS23,RPS24,RPS25,RPS26,RPS27,RPS27A,RPS27L,RPS28,RPS29,RPS3,RPS3A,RPS4X,RPS4Y1,RPS4Y2,RPS5,RPS6,RPS6KA1,RPS6KA2,RPS6KA3,RPS6KA4,RPS6KA5,RPS6KA6,RPS6KB1,RPS6KB2,RPS6KC1,RPS6KL1,RPS7,RPS8,RPS9,RPSA",
	nRow = 7,
	nCol = 10,
	height=9,
	labelOutliers=true,
	cexSampleLabel=0.3,
	cexGroupLabel=0.6,
	caption = 'Expression of genes coding for ribosomal proteins.',
	sectionTitle="Ribosomal proteins", 
	sectionType="subsection"
)

boxplotEpigeneticModifiers = ExpressionBoxPlot
(
	expr   = deseqExprMatrix.log2,
	force sampleGroups = sampleGroups,
	includeGroups = "iAMP21,HD,DS,ER,BO,immature,preB,mature",
	annotation = geneAnnot,
	hgnc = "HDAC1,HDAC2,HDAC3,HDAC4,HDAC5,HDAC6,HDAC7,HDAC8,HDAC9,HDAC10,HDAC11,EP300,EZH1,EZH2,SUZ12,EED,EHMT1,EHMT2,KMT2A,KMT2D,KMT2C,DNMT1,DNMT3A,DNMT3B,TET1,TET2,CREBBP,SUV39H1",
	nRow = 4,
	nCol = 7,
	height=9,
	labelOutliers=true,
	cexGroupLabel=0.7,
	caption = 'Expression of epigenetic modifier genes. EHMT2=G9A; KMT2A=MLL1; KMT2D=MLL2; KMT2C=MLL3.',
	sectionTitle="Epigenetic modifiers", 
	sectionType="subsection"
)

boxplotProtocadherin = ExpressionBoxPlot
(
	expr   = deseqExprMatrix.log2,
	force sampleGroups = sampleGroups,
	includeGroups = "iAMP21,HD,DS,ER,BO,immature,preB,mature",
	annotation = geneAnnot,
	hgnc = "PCDHGB3,PCDHGA10,PCDHGA9,PCDHGC3,PCDHGA1,PCDHGA6,PCDHGA7,PCDHGA4,PCDHGA8,PCDHGB6,PCDHGC5,PCDHGB1,PCDHGA2,PCDHGA5,PCDHGC4,PCDHGA12,PCDHGA3,PCDHGB2,PCDHGB7,PCDHGB4,PCDHGA11",
	nRow = 4,
	nCol = 6,
	height=9,
	labelOutliers=true,
	cexGroupLabel=0.7,
	caption = 'Expression of protocadherin gamma gene cluster.',
	sectionTitle="Protocadherin gamma", 
	sectionType="subsection"
)

boxplotMartens = ExpressionBoxPlot
(
	expr   = deseqExprMatrix.log2    @require @doc="Expression matrix",
	force sampleGroups = sampleGroups  @require @doc="Sample sets",
	includeGroups = "iAMP21,HD,DS,ER,BO,immature,preB,mature",
	annotation = geneAnnot           @require @doc="Gene annotations",
	hgnc = "MBD6BP2,FHOD1,PLEK,KRI1,DENND3,DNM2,PLXND1,MCAM,ADAM8,FLT3,PLEKHO1,PSAP,CSK,DDIT4,PTPN6,NRXN2,MYO9B,C15orf39,NCOR2,RASGRP2,PREX1,GALNT6,IFNAR2,HECW1,CYTH4,C5AR1,CTSD,FBXO46,AKNA",
	nCol = 7,
	nRow = 4,
	labelOutliers=true,
	cexGroupLabel=0.7,
	caption = 'Expression of top-28 up-regulated genes in iAMP21 vs. non-iAMP21 samples that overlap with MSigDB 5.0 MARTENS_BOUND_BY_PML_RARA_FUSION gene set.',
	sectionTitle="Martens bound by PML/RARA fusion", 
	sectionType="subsection"
)

boxplotHollemanUp = ExpressionBoxPlot
(
	expr = deseqExprMatrix.log2    @require @doc="Expression matrix",
	force sampleGroups = sampleGroups  @require @doc="Sample sets",
	includeGroups = "iAMP21,HD,DS,ER,BO,immature,preB,mature",
	annotation = geneAnnot           @require @doc="Gene annotations",
	hgnc = "CLEC11A,IGFBP7,NTRK3,RPL11,RPL5,EIF3L,RPS3,GNB2L1,RPL6,RPL13A,RPL3,GATA3,EIF3D,EEF1G,FAM46C,RPL4,EEF1B2,RPS5,GLTSCR2,CCDC69,FBL,RPL7A,TPM4,LPCAT1,EIF3K,BCR",
	nCol = 7,
	nRow = 4,
	labelOutliers=true,
	cexGroupLabel=0.7,
	caption = std.quote('MSigDB gene set HOLLEMAN_ASPARAGINASE_RESISTANCE_B_ALL_UP. Genes up-regulated in asparaginase resistant vs. sensitive B-lineage ALL.', type="Latex"),
	sectionTitle = std.quote("HOLLEMAN_ASPARAGINASE_RESISTANCE_B_ALL_UP", type="Latex"), 
	sectionType="subsection"
)

boxplotHollemanDn = ExpressionBoxPlot
(
	expr = deseqExprMatrix.log2    @require @doc="Expression matrix",
	force sampleGroups = sampleGroups  @require @doc="Sample sets",
	includeGroups = "iAMP21,HD,DS,ER,BO,immature,preB,mature",
	annotation = geneAnnot           @require @doc="Gene annotations",
	hgnc = "RAP2C,GPR56,RAB5C,ARRB2,HIST1H2BK,ARF6,MAPK1IP1L,ZNF318,JUP,CCNG2,MAN1A1,UBE2Z,ELK3,DERL2,H2BFS",
	nCol = 7,
	nRow = 4,
	labelOutliers=true,
	cexGroupLabel=0.7,
	caption = std.quote('MSigDB gene set HOLLEMAN_ASPARAGINASE_RESISTANCE_B_ALL_DN. Genes down-regulated in asparaginase resistant vs. sensitive B-lineage ALL.', type="Latex"),
	sectionTitle = std.quote("HOLLEMAN_ASPARAGINASE_RESISTANCE_B_ALL_DN", type="Latex"), 
	sectionType="subsection"
)

boxplotPark2003Table2 = ExpressionBoxPlot
(
	expr   = deseqExprMatrix.log2    @require @doc="Expression matrix",
	force sampleGroups = sampleGroups  @require @doc="Sample sets",
	includeGroups = "iAMP21,HD,DS,ER,BO,immature,preB,mature",
	annotation = geneAnnot           @require @doc="Gene annotations",
	hgnc = "PLEK,PSAP,PTPN6,CEBPA,SMOX,TNFAIP2,NCF1,RARG,MERTK,FLNB,ELF4,LSP1,GYPC,TNFRSF1B,THBD,ST3GAL1,NDRG1,ID1,IDH1,LITAF,SLA",
	nCol = 6,
	nRow = 4,
	labelOutliers=true,
	cexGroupLabel=0.7,
	caption = 'Genes up-regulated in iAMP21 vs. non-iAMP21 samples representing the core enrichment genes in GeneSigDB gene set 12893766-Table2 (Park et al., 2003). This study performed a comparative analysis of genes regulated by PML/RAR alpha and PLZF/RAR alpha in response to retinoic acid using oligonucleotide arrays. The genes shown here were found up-regulated in APL fusion protein-expressing cells upon retinoid treatment.',
	sectionTitle="Retinoid up-regulated genes in APL fusion protein-expressing cells", 
	sectionType="subsection"
)

boxplotHIST1Cluster = ExpressionBoxPlot
(
	expr   = deseqExprMatrix.log2    @require @doc="Expression matrix",
	force sampleGroups = sampleGroups  @require @doc="Sample sets",
	includeGroups = "iAMP21,HD,DS,ER,BO,immature,preB,mature",
	annotation = geneAnnot           @require @doc="Gene annotations",
	hgnc = "HIST1H2BJ,HIST1H2BD,HIST1H4H,HIST1H2AC,HIST1H2AG,HIST1H2BF,HIST1H2BK",
	nCol = 4,
	nRow = 2,
	labelOutliers=true,
	cexGroupLabel=0.7,
	caption = 'HIST1 histones',
	sectionTitle="HIST1 histones", 
	sectionType="subsection"
)

boxplotOther = ExpressionBoxPlot
(
	expr   = deseqExprMatrix.log2    @require @doc="Expression matrix",
	force sampleGroups = sampleGroups  @require @doc="Sample sets",
	includeGroups = "iAMP21,HD,DS,ER,BO,immature,preB,mature",
	annotation = geneAnnot           @require @doc="Gene annotations",
	hgnc = "ETV6,RUNX1,CRLF2,P2RY8,EBF1,PAX5,VPREB1,HMGN1,MME,CD34,CD19,MS4A1,SPI1,ETS2,GATA2,GAPDH,KIT,ERG,LGMN,TEK,CD40,TRAF1,TRAF2,TRAF3,TRAF5,MLLT6,MYC,GUSB",
	nCol = 6,
	nRow = 5,
	labelOutliers=true,
	cexGroupLabel=0.7,
	caption = 'Expression of other selected genes of interest. MME=CD10; MS4A1=CD20; KIT=c-Kit; TEK=Tie-2; PU.1=SPI1',
	sectionTitle="Other genes of interest", 
	sectionType="subsection"
)

boxplotSelectedGenes = LatexCombiner
(
	array        = {boxplotCRA.document, boxplotRibosomalProteins.document, boxplotEpigeneticModifiers.document, boxplotProtocadherin.document, boxplotMartens.document, boxplotHollemanUp.document, boxplotHollemanDn.document, boxplotPark2003Table2.document, boxplotHIST1Cluster.document, boxplotOther.document}, 
	pagebreak    = true,
	sectionTitle = "Expression values of selected genes", 
	sectionType  = "section"
)

//------------------------------------------------------------------------------------------------
//--- POSITIONAL GENE ENRICHMENT
//------------------------------------------------------------------------------------------------

include "/mnt/projects/iamp/anduril/includes/pgeReport.and"

pgeReportLst = record()
for ID, comparison : comparisons 
{ 
	pgeReportLst[ID] = PGEReport
	(
		query=degCalledLst[ID], 
		reference=gtfNorRNA.optOut1, 
		title=ID,
		pvalue=0.01,
		includeHeader=std.length(pgeReportLst)==0,
		@name="pge_" + std.quote(ID, type="Anduril"),
		@enabled = runPGE
	)
}
	
pgeReport = LatexCombiner
(
	array=pgeReportLst, 
	pagebreak=true, 
	sectionTitle="Positional gene enrichment (PGE) of differentially expressed genes", 
	sectionType="section"
)

//------------------------------------------------------------------------------------------------
//--- COMBINED REPORT
//------------------------------------------------------------------------------------------------

docTemplate = LatexTemplate
(
	authors  = std.quote(authors, type="LaTeX"),
	bibtex1  = rConfig.citations,
	bibtex2  = bibtexMoksiskaan,
	bibtex3  = bibtexSequencing,
	title    = std.quote(title, type="LaTeX"),
	printTOC = true
)

combinedReport = LatexCombiner
(
	array={
		experimentReport,
		qcReport.report,
		degReport,
		boxplotSelectedGenes,
		pgeReport,
		degReportMir,
		rConfig.report
	}
)

combinedPDF = LatexPDF
(
	document = combinedReport,
	header   = latexHeader,
	footer   = docTemplate.footer,
	useRefs  = true,
	verbose  = false
)

@out.out.filename = shortName + "-main.pdf"
OUTPUT(combinedPDF.document)

//------------------------------------------------------------------------------------------------
//--- EXCEL FILES WITH DIFFERENTIALLY EXPRESSED GENES
//------------------------------------------------------------------------------------------------

include "/mnt/projects/iamp/anduril/includes/degExcel.and"

degExcel = degExcelOutput
(
	degTables   = degCalledLst,
	degAllLst   = degAllLst,
	linkRule    = ensemblRef,
	geneNames   = geneNames,
	geneAnnot   = geneAnnot,
	comparisons  = comparisons,
	fdrCutoff    = 1
)
	
@out.out.filename = shortName + "-DE-genes.xls"
OUTPUT(degExcel.degs)

@out.out.filename = shortName + "-all-genes.xls"
OUTPUT(degExcel.allGenes)

//------------------------------------------------------------------------------------------------
//--- FUNCTIONAL ANALYSIS REPORT
//------------------------------------------------------------------------------------------------

include "functionalAnalysis.and"

funcReport = createFunctionalAnalysisReport
(
	geneGO    = geneGO,
	groups    = comparisons, 
	degTables = degCalledLst, 
	gstats    = degAllLst, 
	degLst    = degCalledLst,
	@enabled  = runFunct
)

functioPDF = LatexPDF
(
	document = funcReport,
	header   = latexHeader,
	footer   = docTemplate.footer,
	useRefs  = true,
	verbose  = false,
	@enabled = runFunct
)
	
OUTPUT(functioPDF.document)

//------------------------------------------------------------------------------------------------
//--- GENE SET ENRICHMENT ANALYSIS (GSEA)
//------------------------------------------------------------------------------------------------
include "/mnt/projects/iamp/anduril/includes/gsea.and"

// filter comparisons for which GSEA is requested

comparisonsGSEA = record()
for ID, comparison : comparisons
{
	if (comparison.gsea == "yes") {
		comparisonsGSEA[ID] = comparison
	}
}

// produce RNK files for each comparison

rnks = record()
for ID, comparison : comparisonsGSEA 
{	
	rnks[ID] = DEG2Rnk
	(
		deg        = degAllLst[ID],
		annotation = geneNames,
		colP       = "p" + ID,
		colFC      = "fc" + ID,
		rankBy     = "p",
		@name      = "rnk_" + std.quote(ID, type="Anduril"),
		@enabled   = runGSEA
	)
}

// run GSEA for each comparison and database

enrichedUp = record()
enrichedDn = record()
minSetSize = record()
maxSetSize = record()
permutations = 1000

// MSigDB

category = "MSigDB"	
enrichedUp[category] = record() 
enrichedDn[category] = record() 
minSetSize[category] = 5
maxSetSize[category] = 5000

for ID, comparison : comparisonsGSEA 
{	
	gseaMSigDB = GSEA
	(
		rnk = rnks[ID],
		annotations = genesetAnnotation,
		label = ID,
		gmt   = "/mnt/projects/generic/data/msigdb5.0/c1.all.v5.0.symbols.gmt," + 
		        "/mnt/projects/generic/data/msigdb5.0/c2.all.v5.0.symbols.gmt," + 
		        "/mnt/projects/generic/data/msigdb5.0/c3.mir.v5.0.symbols.gmt," + 
		        "/mnt/projects/generic/data/msigdb5.0/c5.all.v5.0.symbols.gmt," + 
		        "/mnt/projects/generic/data/msigdb5.0/c6.all.v5.0.symbols.gmt," + 
		        "/mnt/projects/generic/data/msigdb5.0/c7.all.v5.0.symbols.gmt," + 
		        "/mnt/projects/generic/data/msigdb5.0/h.all.v5.0.symbols.gmt," +
		        "/mnt/projects/generic/data/ccri/ccri_custom_gene_sets.gmt," +
		        "/mnt/projects/generic/data/ccri/ccri_literature_curated_genesets_gsea.gmt," +
		        "/mnt/projects/generic/data/laurenti_2013_hematopoietic_lineages.gmt", 
		options = "-nperm " + permutations + " -set_max " + maxSetSize[category] + " -set_min " + minSetSize[category],
		@memory  = 7000,
		@cpu     = 2, 			
		@name = "gseaMSigDB_" + std.quote(ID, type="Anduril"),
		@enabled = runGSEA
	)
	enrichedUp[category][ID] = gseaMSigDB.enrichedUp
	enrichedDn[category][ID] = gseaMSigDB.enrichedDown
}

// IKAROS gene sets

category = "IKAROS"	
enrichedUp[category] = record() 
enrichedDn[category] = record() 
minSetSize[category] = 5
maxSetSize[category] = 5000

for ID, comparison : comparisonsGSEA 
{	
	gseaIKAROS = GSEA
	(
		rnk = rnks[ID],
		annotations = genesetAnnotation,
		label = ID,
		gmt   = "/mnt/projects/ikaros/data/ikaros_curated_genesets_gsea.gmt", 
		options = "-nperm " + permutations + " -set_max " + maxSetSize[category] + " -set_min " + minSetSize[category],
		@memory  = 7000,
		@cpu     = 2, 			
		@name = "gseaIKAROS_" + std.quote(ID, type="Anduril"),
		@enabled = runGSEA
	)
	enrichedUp[category][ID] = gseaIKAROS.enrichedUp
	enrichedDn[category][ID] = gseaIKAROS.enrichedDown
}

// GeneSigDB

category = "GeneSigDB"	
enrichedUp[category] = record()
enrichedDn[category] = record()
minSetSize[category] = 5
maxSetSize[category] = 1000

for ID, comparison : comparisonsGSEA 
{	
	gseaGeneSigDB = GSEA
	(
		rnk = rnks[ID],
		annotations = genesetAnnotation,
		label = ID,
		gmt   = "/mnt/projects/generic/data/GeneSigDB/ALL_SIGSv4.nodup.gmt",
		options = "-nperm " + permutations + " -set_max " + maxSetSize[category] + " -set_min " + minSetSize[category],
		@memory  = 7000,
		@cpu     = 2, 			
		@name = "gseaGeneSigDB_" + std.quote(ID, type="Anduril"),
		@enabled = runGSEA
	)
	enrichedUp[category][ID] = gseaGeneSigDB.enrichedUp
	enrichedDn[category][ID] = gseaGeneSigDB.enrichedDown
}
	
// DSigDB

category = "DSigDB"	
enrichedUp[category] = record()
enrichedDn[category] = record()
minSetSize[category] = 3
maxSetSize[category] = 1000

for ID, comparison : comparisonsGSEA 
{	
	gseaDSigDB = GSEA
	(
		rnk = rnks[ID],
		annotations = genesetAnnotation,
		label = ID,
		gmt   = "/mnt/projects/generic/data/DSigDB/DSigDB_v1.0_All.nodup.gmt",
		options = "-nperm " + permutations + " -set_max " + maxSetSize[category] + " -set_min " + minSetSize[category],
		@memory  = 7000,
		@cpu     = 2, 			
		@name = "gseaDSigDB_" + std.quote(ID, type="Anduril"),
		@enabled = runGSEA
	)
	enrichedUp[category][ID] = gseaDSigDB.enrichedUp
	enrichedDn[category][ID] = gseaDSigDB.enrichedDown
}

// TF targets

category = "TFT"	
enrichedUp[category] = record()
enrichedDn[category] = record()
minSetSize[category] = 3
maxSetSize[category] = 5000

for ID, comparison : comparisonsGSEA 
{	
	gseaTFTargets = GSEA
	(
		rnk = rnks[ID],
		annotations = genesetAnnotation,
		label = ID,
		gmt   = "/mnt/projects/iamp/data/anduril/encode_tf_chipseq.ucsc.hg19.gmt," +
		        "/mnt/projects/generic/data/pazar/pazar.gmt," +
		        "/mnt/projects/generic/data/msigdb5.0/c3.tft.v5.0.symbols.gmt," +
		        "/mnt/projects/generic/data/opossum3/jaspar_core.gmt",
		options = "-nperm " + permutations + " -set_max " + maxSetSize[category] + " -set_min " + minSetSize[category],
		@memory  = 7000,
		@cpu     = 2, 			
		@name = "gseaTFTargets_" + std.quote(ID, type="Anduril"),
		@enabled = runGSEA
	)
	enrichedUp[category][ID] = gseaTFTargets.enrichedUp
	enrichedDn[category][ID] = gseaTFTargets.enrichedDown
}

// get GSEA reports (heatmap overview + tables with enriched gene sets) 

gseaReport = GSEAReport
(
	enrichedUp = enrichedUp,
	enrichedDn = enrichedDn,
	minSetSizes = minSetSize,
	maxSetSizes = maxSetSize,
	tableReportComparisons = comparisonsGSEA,
	topNHeatmap = 80,
	topNTable = 100,
	expression = degAllLst,
	geneNames  = geneNames,
	sigCutoff = 0.01,
	hsigCutoff = 0.001,
	sigCutoffCustom = 0.1,
	hsigCutoffCustom = 0.01,
	overlapSigCutoff = 0.05,
	overlapHSigCutoff = 0.001,
	runOverlapReport = runGSEA,
	@enabled = runGSEA
)

docTemplateGsea = LatexTemplate
(
	authors  = std.quote(authors, type="LaTeX"),
	bibtex1  = rConfig.citations,
	bibtex2  = bibtexSequencing,
	title    = std.quote(title + " GSEA Report", type="LaTeX"),
	printTOC = true
)

combinedPDFGsea = LatexPDF
(
	document = gseaReport,
	header   = docTemplateGsea.header,
	footer   = docTemplateGsea.footer,
	useRefs  = true,
	verbose  = false
)

@out.out.filename = shortName + "-GSEA.pdf"
OUTPUT(combinedPDFGsea.document)

//------------------------------------------------------------------------------------------------
//--- MUTATION REPORT
//------------------------------------------------------------------------------------------------

include "/mnt/projects/iamp/anduril/includes/mutations.and"

mutationReport = MutationReport
(
	alignedBams  = alignedBams,
	sectionTitle = "Mutated genes",
	sectionType  = "section",
	@enabled     = runMutations
)

mutationPDF = LatexPDF
(
	document = mutationReport,
	header   = latexHeaderMutation,
	footer   = docTemplate.footer,
	useRefs  = true,
	verbose  = false,
	@enabled = runMutations
)

@out.out.filename = shortName + "-mutations.pdf"
OUTPUT(mutationPDF.document)

