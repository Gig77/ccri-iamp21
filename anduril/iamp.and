//------------------------------------------------------------------------------------------------
//--- CONSTANTS
//------------------------------------------------------------------------------------------------

title = "iAMP21 RNA-seq"
shortName = "iAMP21"
authors = "Christian Frech"

runFunct = true
runGseaMSigDB = true
runGseaGeneSigDB = true
runGseaDSigDB = true
runGseaTFTargets = true
runMutations = true

PROJECT_BASE="/mnt/projects/iamp"
inputBamDir = INPUT(path=PROJECT_BASE+"/data/bam", recursive=false)
inputBamFiles = Folder2Array(folder1 = inputBamDir, filePattern = "C57C3ACXX_CV_([^_]+)_.*[.]bam$")
sampleAnnotation = INPUT(path=PROJECT_BASE+"/data/qlucore/annotations.txt")
comparisons = INPUT(path=PROJECT_BASE+"/data/anduril/comparisons.tsv")
gtf = INPUT(path=PROJECT_BASE+"/data/Homo_sapiens.GRCh37.75.etv6runx1.gtf.gz")
referenceGenomeFasta = INPUT(path="/data_synology/anduril/docker-images/anduril-gsnap_2014_12_28-human_g1k_v37/db/human_g1k_v37/human_g1k_v37_etv6runx1.fasta") 

//zcat /mnt/projects/iamp/data/Homo_sapiens.GRCh37.75.etv6runx1.gtf.gz | grep 'gene_biotype "rRNA"' | perl -ne '/(ENSG[^\"]+)/; print "$1\n"' | sort | uniq > /tmp/ensemblid.rrna
//zcat /mnt/projects/iamp/data/Homo_sapiens.GRCh37.75.etv6runx1.gtf.gz | grep -vf /tmp/ensemblid.rrna | gzip -c > /mnt/projects/iamp/data/Homo_sapiens.GRCh37.75.etv6runx1.norRNA.gtf.gz
gtfNorRNA = INPUT(path=PROJECT_BASE+"/data/Homo_sapiens.GRCh37.75.etv6runx1.norRNA.gtf.gz")
geneGO = INPUT(path="/opt/moksiskaan/pipeline/exec/output/geneGO_9606.csv")  /** Gene Ontology annotations of all genes */
enrichmentTable = INPUT(path="/opt/moksiskaan/pipeline/exec/output/GOEnrichment_9606.csv") // Moksiskaan specific a priori probabilities for the Gene ontology terms.
ensemblDb = INPUT(path="/usr/local/share/anduril-bundles/moksiskaan/etc/ensemblHomoSapiens.properties") // JDBC parameters for Ensembl~\cite{Flicek2008} database.
// mysql --host=ensembldb.ensembl.org --port=5306 --database=homo_sapiens_core_73_37 --user=anonymous -B -A -e "select stable_id as ensembl,description from gene where description is not null;" > /mnt/biowaste/data2/christian.frech/iamp/results/current/anduril/ensembl.homo_sapiens_73_37.geneAnnotations.tsv
geneAnnot = INPUT(path=PROJECT_BASE+"/data/anduril/ensembl.homo_sapiens_75_37.geneAnnotations.tsv") // downloaded via Ensembl biomart http://feb2014.archive.ensembl.org/biomart/martview/b57730c5d3013cd648bcd2c966113d42
latexHeader = INPUT(path=PROJECT_BASE+"/scripts/anduril/latexHeader")
latexHeaderGsea = INPUT(path=PROJECT_BASE+"/scripts/anduril/latexHeaderGsea")
latexHeaderMutation = INPUT(path=PROJECT_BASE+"/scripts/anduril/latexHeaderMutation")
genesetAnnotation = INPUT(path="/mnt/projects/generic/data/ccri/geneset_annotation.tsv")

fcLimitInclude  = 1.00
pLimitInclude   = 1e-5
qLimitInclude   = 1e-2
qLimitExclude   = 0.3
minExprInclude  = 100.00
maxNA    		= 0.90    // fraction of samples allowed to have NA values before gene is discarded

moksiskaanInit = MoksiskaanInit(showLog='EnsemblImport,PathwayCommonsImport,PINAImport,WikiPathways')
ensemblRef = XrefLinkRule(moksiskaan = moksiskaanInit.connection, columns = "Ensembl=Ensembl", xrefTypes  = XrefType_Ensembl_gene)

//------------------------------------------------------------------------------------------------
//--- SETUP SAMPLE GROUPS
//------------------------------------------------------------------------------------------------

sampleGroups = TableQuery(table1 = sampleAnnotation @require,
                          query  = """\
	SELECT * FROM (
	  SELECT "Subtype"                                     AS "ID",
		GROUP_CONCAT("Name" ORDER BY "Name" SEPARATOR ',') AS "Members",
		'median'                                           AS "Type",
		"Subtype"                                          AS "Description"
		FROM   table1
		GROUP  BY "Subtype"
      UNION
	  SELECT 'tumor'                                       AS "ID",
		GROUP_CONCAT("Name" ORDER BY "Name" SEPARATOR ',') AS "Members",
		'median'                                           AS "Type",
		'Leukemic B-cells (iAMP21, DS, ER)'                AS "Description"
		FROM   table1
		WHERE "Subtype" IN ('iAMP', 'DS', 'ER')
      UNION
	  SELECT 'immature'                                     AS "ID",
		GROUP_CONCAT("Name" ORDER BY "Name" SEPARATOR ',') AS "Members",
		'median'                                           AS "Type",
		'Immature B-cells'          AS "Description"
		FROM   table1
		WHERE "Name" = 'S1'
      UNION
	  SELECT 'preB'                                     AS "ID",
		GROUP_CONCAT("Name" ORDER BY "Name" SEPARATOR ',') AS "Members",
		'median'                                           AS "Type",
		'preB-cells'          AS "Description"
		FROM   table1
		WHERE "Name" = 'S2'
	  UNION
	  SELECT 'mature'                                     AS "ID",
		GROUP_CONCAT("Name" ORDER BY "Name" SEPARATOR ',') AS "Members",
		'median'                                           AS "Type",
		'mature B-cells'          AS "Description"
		FROM   table1
		WHERE "Name" = 'S3'
      UNION
	  SELECT 'non-iAMP'                                     AS "ID",
		GROUP_CONCAT("Name" ORDER BY "Name" SEPARATOR ',') AS "Members",
		'median'                                           AS "Type",
		'Non-iAMP21 samples'          AS "Description"
		FROM   table1
		WHERE "Subtype" <> 'iAMP'
      UNION
	  SELECT 'non-DS'                                     AS "ID",
		GROUP_CONCAT("Name" ORDER BY "Name" SEPARATOR ',') AS "Members",
		'median'                                           AS "Type",
		'Non-Down syndrome samples'          AS "Description"
		FROM   table1
		WHERE "Subtype" <> 'DS'
      UNION
	  SELECT 'non-ER'                                     AS "ID",
		GROUP_CONCAT("Name" ORDER BY "Name" SEPARATOR ',') AS "Members",
		'median'                                           AS "Type",
		'Non-ETV6-RUNX1 samples'          AS "Description"
		FROM   table1
		WHERE "Subtype" <> 'ER'
	)	
	ORDER BY "ID"
                                   """)
sampleGroupsSimple = CSVFilter(csv=sampleGroups, regexp="ID=iAMP|DS|ER|CD19")

//------------------------------------------------------------------------------------------------
//--- SETUP COMPARISON GROUPS
//------------------------------------------------------------------------------------------------

comparisonGroups = record()
for comparison : std.itercsv(comparisons) 
{
	// fetch group names
	gCase    = null
	gControl = null
	for g : std.split(comparison.Members, ',')
	{
		if (gCase    == null) { gCase    = g } else
		if (gControl == null) { gControl = g } else
		std.fail("Too many groups listed for ", comparison.ID, " (", comparison.Description, "). Members = ", comparison.Members, sep='')
	}
	
	// fetch sample names
	// make 'CD19+' match in following regular expression 
	gControlEscaped = std.strReplace(gControl,"\\+","\\\\+")
	sampleIdLst = CSV2IDList
	(
		table1    = sampleGroups @require,
		columnIn  = "Members",
		columnOut = "Sample",
		isList    = true,
		regexp1   = "ID=("+gCase+"|"+gControlEscaped+")",
		@name     = "samples_"+comparison.ID
	)

	// add group record	
	comparisonGroups[comparison.ID] = 
	{
		'caseG'       = gCase,
		'controlG'    = gControl,
		'otherG'      = comparison.ControlGroups,
		'sampleIdLst' = sampleIdLst.ids,
		'sampleIds'   = std.strReplace(std.fRead(sampleIdLst.ids), "\n", ",", "^[^,]+,(.*)", "$1", ",$", ""),
		'desc'        = comparison.Description
	}
}

//------------------------------------------------------------------------------------------------
//--- EXPERIMENTAL SETUP REPORT
//------------------------------------------------------------------------------------------------

include "experimentalSetup.and"

experimentReport = experimentalSetupReport
(
	sampleGroups = sampleGroups,
	comparisons  = comparisons
)

//------------------------------------------------------------------------------------------------
//--- ALIGNMENT
//------------------------------------------------------------------------------------------------

alignedBams = record()
for bam : std.iterArray(inputBamFiles) 
{
	@out.alignment.filename = bam.key+'.gsnap.sorted.dupmarked.bam'
	gsnap = GSNAP
	(
		reads    = INPUT(path=bam.file), 
		options  = "--db=g1k_v37_etv6runx1 --dir=/data_synology/anduril/docker-images/anduril-gsnap_2014_12_28-human_g1k_v37/db/human_g1k_v37 --use-splicing=g1k_v37.splicesites --use-snps=g1k_v37.snp138 --nthreads 15 --maxsearch=100 --npaths=1 --max-mismatches=1 --novelsplicing=0 --batch=4 --genome-unk-mismatch=0",
		docker   = "biowaste:5000/anduril/gsnap",
		@cpu     = 10, 
		@memory  = 40000,
		@name    = "gsnap_" + bam.key,
		@execute = "once" 
	)
	alignedBams[bam.key] = gsnap.alignment
}

//------------------------------------------------------------------------------------------------
//--- EXPRESSION MATRIX
//------------------------------------------------------------------------------------------------

//bamCounts = HTSeq(alignments = alignedBAMs, annotationGTF = gtfNorRNA, options = "-t exon -s no")
bamCounts  = {}
for sample, bam : alignedBams 
{
	sName = std.quote(sample, type="Anduril")
	@out.optOut1.filename = sName+'.htseq.counts'
	count = BashEvaluate
	(
		var1 = bam,
		var2 = gtfNorRNA,
		script = "htseq-count -f bam -t exon -s no @var1@ @var2@ | grep -v '^__' > @optOut1@",
		@name = "htseq_"+sName
	)
	bamCounts[sample] = count.optOut1
}

deseqExprMatrix = DESeqExpr
(
	geneCounts  = bamCounts,
    counts      = false,
    maxNA       = maxNA,
    normalized  = true
)

//------------------------------------------------------------------------------------------------
//--- QUALITY CONTROL
//------------------------------------------------------------------------------------------------

include "qc.and"

qcReport  = getQCReport
(
	alignedBAMs = alignedBams,
    gtf = gtf,
    counts = bamCounts,
    force expr   = deseqExprMatrix.expr,
    force groups = sampleGroupsSimple
)

//------------------------------------------------------------------------------------------------
//--- DIFFERENTIAL GENE EXPRESSION ANALYSIS
//------------------------------------------------------------------------------------------------

gMoksisA = PiispanhiippaAnnotator(sourceKeys = deseqExprMatrix.expr @require,
                                  connection = moksiskaanInit.connection,
                                  inputDB    = XrefType_Ensembl_gene,
                                  organism   = Organism_Homo_sapiens,
                                  targetDB   = "BioentityName,DNARegion")

geneNames = CSVCleaner(original   = gMoksisA.bioAnnotation,
                       columns    = "sourceKey,BioentityName,DNARegion",
                       rename     = "sourceKey=Ensembl,BioentityName=Gene",
                       skipQuotes = "*",
                       trim       = true,
                       @keep      = true)


degAllLst  = record()        // unfiltered output of DESeq2 for each comparison
degCalledLst  = record()     // only significant DEGs for each comparison

// compute differential expression statistics with DESeq2

for ID, group : comparisonGroups
{
	if (ID != "iAMPspecific") 
	{
		deseq = DESeq2
		(
			countFiles              = bamCounts,
			samples                 = sampleGroups,
		    nameControl             = group.controlG,
		    nameCase                = group.caseG,
		    additionalGroups        = group.otherG,
		    label                   = ID,
		    minReplicatesForReplace = 7,
		    @name                   = "deseq_" + ID
		)
		degAllLst[ID] = deseq.results
			
		// subset statistically significant DEGs
		degCalled = TableQuery
		(
			table1 = deseq @require,
			query  = 
				"""
				SELECT DISTINCT "ids"                 AS "ids", 
				                "fc"""+ID+""""        AS "fc", 
				                "meanExprE"""+ID+"""" AS "meanExprE", 
				                "meanExprC"""+ID+"""" AS "meanExprC", 
				                "p"""+ID+""""         AS "p", 
				                "q"""+ID+""""         AS "q" 
				FROM   table1
					WHERE  (ABS("fc"""+ID+"""")    >= """ + fcLimitInclude + """) AND
						   ("p"""+ID+""""          <= """ + pLimitInclude  + """) AND
						   ("q"""+ID+""""          <= """ + qLimitInclude  + """) AND
						   (("meanExprE"""+ID+"""" >= """ + minExprInclude + """) OR
						   ("meanExprC"""+ID+""""  >= """ + minExprInclude + """))
						   ORDER  BY 1
				""",
				@name  = "degCalled_"+ID
		)
		degCalledLst[ID] = degCalled.table
	}
}

// special comparisons: simply substract one gene list from another; DESeq2 does not need to run in this case

for ID, group : comparisonGroups
{
	if (ID == "iAMPspecific")
	{
		quotedSampleIds = 'table1."' + std.strReplace(comparisonGroups["iAMPvsNoniAMP"].sampleIds, ',', '", table1."') + '"'	
		deseq = TableQuery
		(
			table1 = degAllLst["iAMPvsNoniAMP"] @require,
			table2 = degAllLst["ERvsDS"]  @require,
			query  = '''SELECT table1."ids"                    AS "ids", 
				               table1."fciAMPvsNoniAMP"        AS "fciAMPspecific", 
				               table1."piAMPvsNoniAMP"         AS "piAMPspecific", 
				               table1."qiAMPvsNoniAMP"         AS "qiAMPspecific", 
				               table1."meanExpriAMPvsNoniAMP"  AS "meanExpriAMPspecific", 
				               table1."meanExprEiAMPvsNoniAMP" AS "meanExprEiAMPspecific", 
				               table1."meanExprCiAMPvsNoniAMP" AS "meanExprCiAMPspecific",
				               '''+quotedSampleIds+''' 
			            FROM table1 LEFT OUTER JOIN table2 ON table1."ids" = table2."ids" 
						WHERE table2."qERvsDS" IS NULL OR table2."qERvsDS" >= 0.3
			            ''',
			@name  = "deseq_" + ID
		)
		degAllLst[ID] = deseq.table

		degCalled = TableQuery
		(
			table1 = degCalledLst["iAMPvsNoniAMP"] @require,
			table2 = degAllLst["ERvsDS"]  @require,
			query  = '''SELECT table1.* FROM table1 LEFT OUTER JOIN table2 ON table1."ids" = table2."ids" WHERE table2."qERvsDS" IS NULL OR table2."qERvsDS" >= ''' + qLimitExclude,
			@name  = "degCalled_" + ID
		)
		degCalledLst[ID] = degCalled.table
	} 
}

//------------------------------------------------------------------------------------------------
//--- VENN DIAGRAMS
//------------------------------------------------------------------------------------------------

degSets = CSV2SetList(tables=degCalledLst)

venn = VennDiagram
(
	sets         = degSets,
	cexSetName   = 0.3,
	cexSetSize   = 0.3,
	doWeights    = true,
	sets1        = "iAMPvsDS,iAMPvsER,ERvsDS",
	sets2        = "iAMPvsImmature,DSvsImmature,ERvsImmature",
	sets3        = "iAMPvsPreB,DSvsPreB,ERvsPreB",
	sets4        = "iAMPvsMature,DSvsMature,ERvsMature",
	sectionTitle = "Gene set comparisons",
	sectionType  = "subsection",
	types        = "circles"
)

degReportLst = record(venn=venn.report)

//------------------------------------------------------------------------------------------------
//--- DEG REPORTS
//------------------------------------------------------------------------------------------------

include "degTable.and"
include "degBoxPlot.and"
include "goClustering.and"
include "goEnrichment.and"
include "expressionHeatmap.and"

ensembl2ucsc = BashEvaluate
(
	script = """mysql -h genome-mysql.cse.ucsc.edu -u genome -D hg19 -B -A -e 'select DISTINCT g.name, g.chrom, g.txStart, g.txEnd, eg.name2 as ensembl, 0 as tmp1, g.strand, g.cdsStart, g.cdsEnd, 0 as tmp2, g.exonCount, g.exonStarts, g.exonEnds from knownGene as g, knownCanonical as c, knownToEnsembl as ke, ensGene as eg where g.name=c.transcript and g.name=ke.name and ke.value=eg.name and eg.name2 like "ENSG%";' > @optOut1@""",
	@execute = "once"
)

ensembl2ucsc4rseqc = REvaluate
(
	table1 = ensembl2ucsc.optOut1,
	script = StringInput(content=
		'''
		table.out <- table1
		table.out$chrom <- gsub("^chr", "", table.out$chrom)
		table.out$exonLengths <- apply(table.out, 1, function(x) paste(as.numeric(unlist(strsplit(x["exonEnds"], ",")))-as.numeric(unlist(strsplit(x["exonStarts"], ","))), collapse=","))
		table.out$exonOffsets <- apply(table.out, 1, function(x) paste(as.numeric(unlist(strsplit(x["exonStarts"], ",")))-as.numeric(x["txStart"]), collapse=","))
		table.out <- table.out[,!names(table.out) %in% c("name", "exonStarts", "exonEnds")]
		return(0)
		'''
	)
)		

for ID, group : comparisonGroups 
{	
	//--- TABLES WITH UP- AND DOWN-REULATED GENES --------------------------------------------------------------------------//

	degTableUp = getDEGTableReport
	(
		degs = degCalledLst[ID],
		degReportRefs = ensemblRef,
		direction = "up",
		group = group,
		ID=ID,
		section="Genes with higher expression in "+group.caseG+" than "+group.controlG+" samples",
		sectionType="subsubsection",
		@name = "degTableUp_"+ID
	)

	degTableDn = getDEGTableReport
	(
		degs = degCalledLst[ID],
		degReportRefs = ensemblRef,
		direction = "down",
		group = group,
		ID=ID,
		section="Genes with lower expression in "+group.caseG+" than "+group.controlG+" samples",
		sectionType="subsubsection",
		@name = "degTableDn_"+ID
	)

	//--- BOX PLOTS TOP UP- AND DOWN-REGULATED GENES ----------------------------------------------------------------------//

	degBoxplotUp = getDEGBoxPlots
	(
		degs = degCalledLst[ID],
		exprMatrix = deseqExprMatrix.expr,
		force sampleGroups=sampleGroups,
		geneAnnot=geneAnnot,
		direction="up",
		comparison=group,
		sectionType="subsubsection",
		@name = "degBoxplotUp_"+ID
	)

	degBoxplotDn = getDEGBoxPlots
	(
		degs = degCalledLst[ID],
		exprMatrix = deseqExprMatrix.expr,
		force sampleGroups=sampleGroups,
		geneAnnot=geneAnnot,
		direction="down",
		comparison=group,
		sectionType="subsubsection",
		@name = "degBoxplotDn_"+ID
	)

	//--- EXPRESSION HEATMAP --------------------------------------------------------------------------//

	exprMatrixFiltered = CSVFilter
	(
		csv            = deseqExprMatrix.expr,
		auxiliary      = degCalledLst[ID] @require,
		includeColumns = group.sampleIdLst,
		includeColumns = "RowName",
		colOrder       = true,
		@name          = "exprMatrix_"+ID
	)                      

	exprHeatmap = getHeatmapReport
	(
		exprMatrix = exprMatrixFiltered,
		geneNames = geneNames,
		group = group,
		sectionType="subsubsection",
		@name = "heatmap"+ID
	)

	//--- GO CLUSTERING -------------------------------------------------------------------------------//

	goClustering = getGOClusteringReport
	(
		exprMatrix = exprMatrixFiltered,
		geneNames = geneNames,
		geneGO    = geneGO,
		ID = ID,
		sectionType="subsubsection",
		@name = "goClustering"+ID,
		@enabled = false
	)

	//--- GO ENRICHMENT -------------------------------------------------------------------------------//

	goEnrichment = getGOEnrichmentReport
	(
		geneIds      = degCalledLst[ID],
		deseq        = degAllLst[ID],
		geneNames    = geneNames,
		geneGO       = geneGO,
		threshold    = 0.01,
		ID           = ID,
		sectionTitle = "GO terms enriched in DEGs between " + group.caseG + " and " + group.controlG,
		sectionType  = "subsubsection",
		@name        = "goEnrichment"+ID
	)

	//--- GENE INTERACTION NETWORK --------------------------------------------------------------------//
	
	statusTable = TableQuery
	(
		table1   = degCalledLst[ID] @require,
		table2   = degAllLst[ID] @require,
		columnTypes = deseqColumnTypes,
		query    = '''
			SELECT "ids" AS "Ensembl", "status" FROM table1
			UNION
			SELECT T2."ids" AS "Ensembl", 1 AS "status"
			FROM   table2 T2 LEFT JOIN table1 T1 ON T2."ids" = T1."ids" 
			WHERE  T1."ids" IS NULL AND T2."meanExpr'''+ID+'''" >= 10 AND T2."q'''+ID+'''" < 0.01 AND T2."fc'''+ID+'''" >= 1
			UNION
			SELECT T2."ids" AS "Ensembl", -1 AS "status"
			FROM   table2 T2 LEFT JOIN table1 T1 ON T2."ids" = T1."ids" 
			WHERE  T1."ids" IS NULL AND T2."meanExpr'''+ID+'''" >= 10 AND T2."q'''+ID+'''" < 0.01 AND T2."fc'''+ID+'''" <= -1
			UNION
			SELECT T2."ids" AS "Ensembl", 0 AS "status"
			FROM   table2 T2 LEFT JOIN table1 T1 ON T2."ids" = T1."ids" 
			WHERE  T1."ids" IS NULL AND T2."meanExpr'''+ID+'''" >= 300 AND T2."q'''+ID+'''" >= 0.9 AND T2."fc'''+ID+'''" > -0.1 AND T2."fc'''+ID+'''" < 0.1
			UNION
			SELECT T2."ids" AS "Ensembl", -2 AS "status"
			FROM   table2 T2 LEFT JOIN table1 T1 ON T2."ids" = T1."ids" 
			WHERE  T1."ids" IS NULL AND T2."meanExpr'''+ID+'''" < 10
            ''',
		@name    = "statusTable_"+ID,
		@enabled = runNetwork
	)
	
    network = InteractionNetwork
    (
    	force genes  = degCalledLst[ID],
		force status = statusTable,
		moksiskaan   = moksiskaanInit.connection,
		ensembl      = ensemblDb,
		organism     = Organism_Homo_sapiens,
		title        = "Interaction network of DEGs between " + group.caseG + " and " + group.controlG,
		linkTypes    = std.concat(sep=",",
			//LinkType_pathway_precedence,
			//LinkType_protein_protein_interaction,
			LinkType_chemical_reaction,
			LinkType_protein_activation,
			LinkType_protein_inhibition,
			LinkType_protein_state_change,
			LinkType_protein_binding,
			LinkType_protein_dissociation,
			LinkType_gene_expression,
			LinkType_gene_repression,
			LinkType_phosphorylation,
			LinkType_dephosphorylation,
			LinkType_glycosylation,
			LinkType_ubiquitination,
			LinkType_deubiquitination,
			LinkType_methylation,
			LinkType_demethylation,
			LinkType_acetylation,
			LinkType_deacetylation,
			LinkType_sumoylation,
			LinkType_desumoylation
		),
		annotRules        = "",
		bioentityTypes    = BioentityType_gene,
		maxGap            = 1,
		cytoscape         = false,
		useStudies        = "",
		hideGaps          = false,
		isolateGroupNames = false,
		expand            = "connected",
		statusFilter      = "NA",
		sectionType       = "subsubsection",
		@name             = "network_"+ID,
		@enabled          = runFunct
	)
	
	// --- GENE BODY COVERAGE -------------------------------------------------------------------------//

	degCalledUCSC = TableQuery
	(
		table1 = degCalledLst[ID],
		table2 = ensembl2ucsc4rseqc.table,
		query  = '''SELECT table2.* FROM table1, table2 WHERE table1."ids" = table2."ensembl" AND table1."fc" > 0''',
		@name  = "degCalledUCSC_" + ID
	)
	
	degGeneBodyCoverage = {}
	for sample : std.itercsv(group.sampleIdLst)
	{
		degGeneBodyCoverage[sample.Sample] = CalcGeneBodyCoverage
		(
			bam    = alignedBams[sample.Sample],
			bed    = degCalledUCSC.table,
			name   = sample.Sample,
			docker = "biowaste:5000/anduril/rseqc",
			@name  = "degGeneBodyCoverage_" + ID + "_" + sample.Sample
		)
	}
	
	combinedGeneBodyCoverage = CSVJoin(array=degGeneBodyCoverage, useKeys=false, @name="degGeneBodyCoverage_" + ID + "_combined")

	geneBodyCoveragePlot = REvaluate
	(
		table1 = combinedGeneBodyCoverage.csv,
		script = geneBodyCoveragePlotScript,
		param1 = "Gene body coverage for genes significantly up-regulated in " + ID,
		param2 = "subsubsection",
		@name  = "degGeneBodyCoveragePlot_" + ID
	)
	
 
	//--- COMBINE REPORTS -----------------------------------------------------------------------------//

	degReportLst[ID] = LatexCombiner
	(
		array = {
			degTableUp, 
			degBoxplotUp,
			degTableDn, 
			degBoxplotDn, 
			exprHeatmap, 
			goEnrichment,
			network.report,
			geneBodyCoveragePlot.document
		},
		sectionTitle=ID, 
		sectionType="subsection"
	)
}

degReport = LatexCombiner
(
	array        = degReportLst,
	pagebreak    = true,
	tail         = '\newpage{}',
	sectionTitle = "Differentially expressed genes"
)

//------------------------------------------------------------------------------------------------
//--- DEG REPORTS OF miRNA TARGETS GENES
//------------------------------------------------------------------------------------------------

mirTargets = INPUT(path="/mnt/projects/iamp/data/miRecords/miRecords.predictedTargets.txt")
miRs = TableQuery(table1 = mirTargets, query = '''SELECT DISTINCT "miRNA ID" FROM table1''')

degReportMirLstGrp = record()
for ID, group : comparisonGroups  
{
	if (ID=="iAMPvsDS" || ID=="iAMPvsER" || ID=="ERvsDS" || ID=="iAMPvsNoniAMP") 
	{	
		degReportMirLst = record()
		for miR: std.split("sa-miR-155 hsa-miR-125b hsa-miR-125a-3p")
		{ 
			instanceSuffix = ID + "_" + std.quote(miR, type="anduril")
		
			degTableMir = TableQuery
			(
				table1 = degTables[ID] @require,
				table2 = mirTargets @require,
				query  = """
					SELECT * FROM table1 WHERE "Gene" IN (SELECT DISTINCT "Symbol" FROM table2 A WHERE A."miRNA ID" = '""" + miR + """')
		            """,
				@name  = "degTableMir_" + instanceSuffix
			)
			
			degTableMirUp = getDEGTableReport
			(
				degs = degTableMir,
				degReportRefs = ensemblRef,
				direction = "up",
				group = group,
				ID=ID,
				@name  = "degTableMirUp_" + instanceSuffix
			)
		
			degTableMirDn = getDEGTableReport
			(
				degs = degTableMir,
				degReportRefs = ensemblRef,
				direction = "down",
				group = group,
				ID=ID,
				@name  = "degTableMirDn_" + instanceSuffix
			)
		
			degReportMirLst[instanceSuffix] = LatexCombiner
			(
				latex1=degTableMirUp, 
				latex2=degTableMirDn, 
				sectionTitle = miR + " target genes differentially expressed comparing " + ID, 
				sectionType = "subsubsection"
			)
		}
		
		degReportMirLstGrp[ID] = LatexCombiner
		(
			array=degReportMirLst, 
			sectionTitle = ID, 
			sectionType = "subsection"
		)
		
	}
}

degReportMir = LatexCombiner
(
	array        = degReportMirLstGrp, 
	pagebreak    = true,
	tail         = '\newpage{}',
	sectionTitle = "Differentially expressed target genes of selected microRNAs", 
	sectionType  = "section"
)


//------------------------------------------------------------------------------------------------
//--- EXPRESSION BOX PLOTS OF SELECTED GENES
//------------------------------------------------------------------------------------------------

genesCRA = TableQuery(table1 = geneAnnot @require,  query  = '''SELECT "Ensembl Gene ID" AS "Ensembl" FROM table1 WHERE "Chromosome Name" = '21' AND "Gene Start (bp)" >= 33192000 AND "Gene End (bp)" <= 39796000 ORDER BY "Gene Start (bp)"''')
boxplotCRA = ExpressionBoxPlot
(
	expr   = deseqExprMatrix.expr    @require @doc="Expression matrix",
	force sampleGroups = sampleGroups,
	includeGroups = "CD19,ER,DS,iAMP",
	annotation = geneAnnot           @require @doc="Gene annotations",
	geneIds = genesCRA,
	nCol = 10,
	nRow = 12,
	height=9,
	labelOutliers=true,
	cexSampleLabel=0.3,
	caption = 'Expression of genes located on chromosome 21 in common region of amplification (CRA), as defined by Strefford et al. (2006). This region extends from 33,192,000 bp to 39,796,000 bp.',
	sectionTitle="Common region of amplification (CRA)", 
	sectionType="subsection"
)

boxplotRibosomalProteins = ExpressionBoxPlot
(
	expr   = deseqExprMatrix.expr,
	force sampleGroups = sampleGroups,
	includeGroups = "CD19,ER,DS,iAMP",
	annotation = geneAnnot,
	hgnc = "RPL10,RPL10A,RPL10L,RPL11,RPL12,RPL13,RPL13A,RPL14,RPL15,RPL17,RPL18,RPL18A,RPL19,RPL21,RPL22,RPL22L1,RPL23,RPL23A,RPL24,RPL26,RPL26L1,RPL27,RPL27A,RPL28,RPL29,RPL3,RPL30,RPL31,RPL32,RPL34,RPL35,RPL35A,RPL36,RPL36A,RPL36AL,RPL37,RPL37A,RPL38,RPL39,RPL39L,RPL3L,RPL4,RPL41,RPL5,RPL6,RPL7,RPL7A,RPL7L1,RPL8,RPL9,RPLP0,RPLP1,RPLP2,RPS10,RPS11,RPS12,RPS13,RPS14,RPS15,RPS15A,RPS16,RPS17,RPS17L,RPS18,RPS19,RPS19BP1,RPS2,RPS20,RPS21,RPS23,RPS24,RPS25,RPS26,RPS27,RPS27A,RPS27L,RPS28,RPS29,RPS3,RPS3A,RPS4X,RPS4Y1,RPS4Y2,RPS5,RPS6,RPS6KA1,RPS6KA2,RPS6KA3,RPS6KA4,RPS6KA5,RPS6KA6,RPS6KB1,RPS6KB2,RPS6KC1,RPS6KL1,RPS7,RPS8,RPS9,RPSA",
	nRow = 7,
	nCol = 10,
	height=9,
	labelOutliers=true,
	cexSampleLabel=0.3,
	caption = 'Expression of genes coding for ribosomal proteins.',
	sectionTitle="Ribosomal proteins", 
	sectionType="subsection"
)

boxplotEpigeneticModifiers = ExpressionBoxPlot
(
	expr   = deseqExprMatrix.expr,
	force sampleGroups = sampleGroups,
	includeGroups = "CD19,ER,DS,iAMP",
	annotation = geneAnnot,
	hgnc = "HDAC1,HDAC2,HDAC3,HDAC4,HDAC5,HDAC6,HDAC7,HDAC8,HDAC9,HDAC10,HDAC11,EP300,EZH1,EZH2,SUZ12,EED,EHMT1,EHMT2,KMT2A,KMT2D,KMT2C,DNMT1,DNMT3A,DNMT3B,TET1,TET2,CREBBP,SUV39H1",
	nRow = 4,
	nCol = 7,
	height=9,
	labelOutliers=true,
	caption = 'Expression of epigenetic modifier genes. EHMT2=G9A; KMT2A=MLL1; KMT2D=MLL2; KMT2C=MLL3.',
	sectionTitle="Epigenetic modifiers", 
	sectionType="subsection"
)

boxplotProtocadherin = ExpressionBoxPlot
(
	expr   = deseqExprMatrix.expr,
	force sampleGroups = sampleGroups,
	includeGroups = "CD19,ER,DS,iAMP",
	annotation = geneAnnot,
	hgnc = "PCDHGB3,PCDHGA10,PCDHGA9,PCDHGC3,PCDHGA1,PCDHGA6,PCDHGA7,PCDHGA4,PCDHGA8,PCDHGB6,PCDHGC5,PCDHGB1,PCDHGA2,PCDHGA5,PCDHGC4,PCDHGA12,PCDHGA3,PCDHGB2,PCDHGB7,PCDHGB4,PCDHGA11",
	nRow = 4,
	nCol = 6,
	height=9,
	labelOutliers=true,
	caption = 'Expression of protocadherin gamma gene cluster.',
	sectionTitle="Protocadherin gamma", 
	sectionType="subsection"
)

boxplotMartens = ExpressionBoxPlot
(
	expr   = deseqExprMatrix.expr    @require @doc="Expression matrix",
	force sampleGroups = sampleGroups  @require @doc="Sample sets",
	includeGroups = "CD19,ER,DS,iAMP",
	annotation = geneAnnot           @require @doc="Gene annotations",
	hgnc = "MBD6BP2,FHOD1,PLEK,KRI1,DENND3,DNM2,PLXND1,MCAM,ADAM8,FLT3,PLEKHO1,PSAP,CSK,DDIT4,PTPN6,NRXN2,MYO9B,C15orf39,NCOR2,RASGRP2,PREX1,GALNT6,IFNAR2,HECW1,CYTH4,C5AR1,CTSD,FBXO46,AKNA",
	nCol = 7,
	nRow = 4,
	labelOutliers=true,
	caption = 'Expression of top-28 up-regulated genes in iAMP21 vs. non-iAMP21 samples that overlap with MSigDB 5.0 MARTENS_BOUND_BY_PML_RARA_FUSION gene set.',
	sectionTitle="Martens bound by PML/RARA fusion", 
	sectionType="subsection"
)

boxplotPark2003Table2 = ExpressionBoxPlot
(
	expr   = deseqExprMatrix.expr    @require @doc="Expression matrix",
	force sampleGroups = sampleGroups  @require @doc="Sample sets",
	includeGroups = "CD19,ER,DS,iAMP",
	annotation = geneAnnot           @require @doc="Gene annotations",
	hgnc = "PLEK,PSAP,PTPN6,CEBPA,SMOX,TNFAIP2,NCF1,RARG,MERTK,FLNB,ELF4,LSP1,GYPC,TNFRSF1B,THBD,ST3GAL1,NDRG1,ID1,IDH1,LITAF,SLA",
	nCol = 6,
	nRow = 4,
	labelOutliers=true,
	caption = 'Genes up-regulated in iAMP21 vs. non-iAMP21 samples representing the core enrichment genes in GeneSigDB gene set 12893766-Table2 (Park et al., 2003). This study performed a comparative analysis of genes regulated by PML/RAR alpha and PLZF/RAR alpha in response to retinoic acid using oligonucleotide arrays. The genes shown here were found up-regulated in APL fusion protein-expressing cells upon retinoid treatment.',
	sectionTitle="Retinoid up-regulated genes in APL fusion protein-expressing cells", 
	sectionType="subsection"
)

boxplotHIST1Cluster = ExpressionBoxPlot
(
	expr   = deseqExprMatrix.expr    @require @doc="Expression matrix",
	force sampleGroups = sampleGroups  @require @doc="Sample sets",
	includeGroups = "CD19,ER,DS,iAMP",
	annotation = geneAnnot           @require @doc="Gene annotations",
	hgnc = "HIST1H2BJ,HIST1H2BD,HIST1H4H,HIST1H2AC,HIST1H2AG,HIST1H2BF,HIST1H2BK",
	nCol = 4,
	nRow = 2,
	labelOutliers=true,
	caption = 'HIST1 histones',
	sectionTitle="HIST1 histones", 
	sectionType="subsection"
)

boxplotOther = ExpressionBoxPlot
(
	expr   = deseqExprMatrix.expr    @require @doc="Expression matrix",
	force sampleGroups = sampleGroups  @require @doc="Sample sets",
	includeGroups = "CD19,ER,DS,iAMP",
	annotation = geneAnnot           @require @doc="Gene annotations",
	hgnc = "ETV6,RUNX1,CRLF2,P2RY8,EBF1,PAX5,VPREB1,HMGN1,MME,CD34,CD19,MS4A1,SPI1,ETS2,GATA2,GAPDH,KIT,ERG,LGMN,TEK,CD40,TRAF1,TRAF2,TRAF3,TRAF5,MLLT6,MYC,GUSB",
	nCol = 6,
	nRow = 5,
	labelOutliers=true,
	caption = 'Expression of other selected genes of interest. MME=CD10; MS4A1=CD20; KIT=c-Kit; TEK=Tie-2; PU.1=SPI1',
	sectionTitle="Other genes of interest", 
	sectionType="subsection"
)

boxplotSelectedGenes = LatexCombiner
(
	array        = {boxplotCRA.document, boxplotRibosomalProteins.document, boxplotEpigeneticModifiers.document, boxplotProtocadherin.document, boxplotMartens.document, boxplotPark2003Table2.document, boxplotHIST1Cluster.document, boxplotOther.document}, 
	pagebreak    = true,
	sectionTitle = "Expression values of selected genes", 
	sectionType  = "section"
)

//------------------------------------------------------------------------------------------------
//--- POSITIONAL GENE ENRICHMENT
//------------------------------------------------------------------------------------------------

include "pgeReport.and"

pgeReportLst = record()
for comparison : std.itercsv(comparisons) {
	
	pgeReportLst[comparison.ID] = PGEReport
	(
		query=degCalledLst[comparison.ID], 
		reference=gtf, 
		title=comparison.ID,
		pvalue=0.01,
		includeHeader=std.length(pgeReportLst)==0,
		@name="pge_"+comparison.ID
	)
}
	
pgeReport = LatexCombiner
(
	array=pgeReportLst, 
	pagebreak=true, 
	sectionTitle="Positional gene enrichment (PGE) of differentially expressed genes", 
	sectionType="section"
)

//------------------------------------------------------------------------------------------------
//--- COMBINED REPORT
//------------------------------------------------------------------------------------------------

rConfig = RConfigurationReport(packages = "base,csbl.go,DESeq2,igraph", sectionType = "section")
bibtexMoksiskaan = INPUT(path="/usr/local/share/anduril-bundles/moksiskaan/components/report-BibTeX/moksiskaan.bib")
bibtexSequencing = INPUT(path="/usr/local/share/anduril-bundles/sequencing/components/report-BibTeX/sequencing.bib")

docTemplate = LatexTemplate
(
	authors  = std.quote(authors, type="LaTeX"),
	bibtex1  = rConfig.citations,
	bibtex2  = bibtexMoksiskaan,
	bibtex3  = bibtexSequencing,
	title    = std.quote(title, type="LaTeX"),
	printTOC = true
)

combinedReport = LatexCombiner
(
	array={
		experimentReport,
		qcReport.report,
		degReport,
		boxplotSelectedGenes,
		pgeReport,
		degReportMir,
		rConfig.report
	}
)

combinedPDF = LatexPDF
(
	document = combinedReport,
	header   = latexHeader,
	footer   = docTemplate.footer,
	useRefs  = true,
	verbose  = false
)

@out.out.filename = shortName + "-main.pdf"
OUTPUT(combinedPDF.document)

//------------------------------------------------------------------------------------------------
//--- FUNCTIONAL ANALYSIS REPORT
//------------------------------------------------------------------------------------------------

include "functionalAnalysis.and"

funcReport = createFunctionalAnalysisReport
(
	geneGO    = geneGO,
	groups    = comparisonGroups, 
	degTables = degTables, 
	gstats    = degAllLst, 
	degLst    = degCalledLst,
	@enabled  = runFunct
)

functioPDF = LatexPDF
(
	document = funcReport,
	header   = latexHeader,
	footer   = docTemplate.footer,
	useRefs  = true,
	verbose  = false,
	@enabled = runFunct
)
	
OUTPUT(functioPDF.document)

//------------------------------------------------------------------------------------------------
//--- GENE SET ENRICHMENT ANALYSIS (GSEA)
//------------------------------------------------------------------------------------------------
include "gsea.and"

gseaMSigDBUp = record()
gseaMSigDBDn = record()
gseaDSigDBUp = record()
gseaDSigDBDn = record()
gseaGeneSigDBUp = record()
gseaGeneSigDBDn = record()
gseaTFTargetsUp = record()
gseaTFTargetsDn = record()

permutations = 100

gseaTableReportGroups = record()
for ID, group : comparisonGroups 
{	
	rnk = DEG2Rnk
	(
		deg = degAllLst[ID],
		annotation = geneNames,
		colP = "p" + ID,
		colFC= "fc" + ID,
		@name = "rnk_" + ID,
		@enabled = runGseaMSigDB || runGseaGeneSigDB || runGseaDSigDB || runGseaTFTargets
	)

	// MSigDB
	
	gseaMSigDB = GSEA
	(
		rnk = rnk,
		annotations = genesetAnnotation,
		label = ID,
		gmt   = "/mnt/projects/generic/data/msigdb5.0/c1.all.v5.0.symbols.gmt," + 
		        "/mnt/projects/generic/data/msigdb5.0/c2.all.v5.0.symbols.gmt," + 
		        "/mnt/projects/generic/data/msigdb5.0/c3.mir.v5.0.symbols.gmt," + 
		        "/mnt/projects/generic/data/msigdb5.0/c5.all.v5.0.symbols.gmt," + 
		        "/mnt/projects/generic/data/msigdb5.0/c6.all.v5.0.symbols.gmt," + 
		        "/mnt/projects/generic/data/msigdb5.0/c7.all.v5.0.symbols.gmt," + 
		        "/mnt/projects/generic/data/msigdb5.0/h.all.v5.0.symbols.gmt," +
		        "/mnt/projects/generic/data/laurenti_2013_hematopoietic_lineages.gmt," + 
		        "/mnt/projects/iamp/results/gsea/custom/mir_target_genesets.gmx," +
		        "/mnt/projects/generic/data/ccri/ccri_custom_gene_sets.gmt," +
		        "/mnt/projects/helena_veronika/data/gsea_custom_gene_sets.gmt",
		options = "-nperm " + permutations + " -set_max 1000 -set_min 5",
		@memory  = 7000,
		@cpu     = 2, 			
		@name = "gseaMSigDB_" + ID,
		@enabled = runGseaMSigDB
	)
	gseaMSigDBUp[ID] = gseaMSigDB.enrichedUp
	gseaMSigDBDn[ID] = gseaMSigDB.enrichedDown

	// GeneSigDB

	gseaGeneSigDB = GSEA
	(
		rnk = rnk,
		annotations = genesetAnnotation,
		label = ID,
		gmt   = "/mnt/projects/generic/data/GeneSigDB/ALL_SIGSv4.nodup.gmt",
		options = "-nperm " + permutations + " -set_max 1000 -set_min 5",
		@memory  = 7000,
		@cpu     = 2, 			
		@name = "gseaGeneSigDB_" + ID,
		@enabled = runGseaGeneSigDB
	)
	gseaGeneSigDBUp[ID] = gseaGeneSigDB.enrichedUp
	gseaGeneSigDBDn[ID] = gseaGeneSigDB.enrichedDown
	
	// DSigDB

	gseaDSigDB = GSEA
	(
		rnk = rnk,
		annotations = genesetAnnotation,
		label = ID,
		gmt   = "/mnt/projects/generic/data/DSigDB/DSigDB_v1.0_All.nodup.gmt",
		options = "-nperm " + permutations + " -set_max 1000 -set_min 3",
		@memory  = 7000,
		@cpu     = 2, 			
		@name = "gseaDSigDB_" + ID,
		@enabled = runGseaDSigDB
	)
	gseaDSigDBUp[ID] = gseaDSigDB.enrichedUp
	gseaDSigDBDn[ID] = gseaDSigDB.enrichedDown

	// Encode ChIP-seq TF target gene sets from UCSC: 	
	// mysql --user=genome --host=genome-mysql.cse.ucsc.edu --database=hg19 --column-names=FALSE --connect-timeout=10000 -B -A -e "select TF, '' AS DESCRIPTION, GROUP_CONCAT(HGNC SEPARATOR ' ') AS HGNC from (select DISTINCT TF.name AS TF, X.geneSymbol AS HGNC from wgEncodeRegTfbsClusteredV3 as TF join knownGene as GENE on TF.chrom=GENE.chrom and TF.chromStart BETWEEN GENE.txStart-2000 and GENE.txStart+2000 join kgXref as X on GENE.name=X.kgID WHERE TF.score=1000 AND X.geneSymbol IS NOT NULL) AS RESULT GROUP BY TF;" | sed 's/ /\t/g' | perl -ne 's/^([^\t]+)/$1_ENCODE/; print $_' > /mnt/projects/iamp/data/anduril/encode_tf_chipseq.ucsc.hg19.gmt
	
	// JASPAR CORE target gene sets from oPOSSUM:
	// perl /mnt/projects/iamp/scripts/opposum2gmt.pl
	
	gseaTFTargets = GSEA
	(
		rnk = rnk,
		annotations = genesetAnnotation,
		label = ID,
		gmt   = "/mnt/projects/iamp/data/anduril/encode_tf_chipseq.ucsc.hg19.gmt," +
		        "/mnt/projects/generic/data/pazar/pazar.gmt," +
		        "/mnt/projects/generic/data/msigdb5.0/c3.tft.v5.0.symbols.gmt," +
		        "/mnt/projects/generic/data/opossum3/jaspar_core.gmt",
		options = "-nperm " + permutations + " -set_max 5000 -set_min 3",
		@memory  = 7000,
		@cpu     = 2, 			
		@name = "gseaTFTargets_" + ID,
		@enabled = runGseaTFTargets
	)
	gseaTFTargetsUp[ID] = gseaTFTargets.enrichedUp
	gseaTFTargetsDn[ID] = gseaTFTargets.enrichedDown

	// generate table reports only for main groups of interest to reduce number of output pages 	
	if (ID == "TumorVsNormal" || ID == "iAMPvsDS" || ID == "iAMPvsER" || ID == "ERvsDS" || ID == "iAMPvsNoniAMP" || ID == "DSvsNonDS" || ID == "ERvsNonER" || ID == "iAMPspecific") 
	{
		gseaTableReportGroups[ID] = group
	}
}

gseaReportMSigDB = getGSEAReportMSigDB
(
	enrichedUp = gseaMSigDBUp,
	enrichedDn = gseaMSigDBDn,
	tableReportGroups = gseaTableReportGroups,
	minSetSize        = 10,
	maxSetSize        = 1000,
	@enabled = runGseaMSigDB
)

gseaReportHematologic = getGSEAReportHematologic
(
	enrichedUp = gseaMSigDBUp,
	enrichedDn = gseaMSigDBDn,
	tableReportGroups = gseaTableReportGroups,
	minSetSize        = 10,
	maxSetSize        = 1000,
	@enabled = runGseaMSigDB
)

gseaReportGeneSigDB = getGSEAReportGeneSigDB
(
	enrichedUp        = gseaGeneSigDBUp,
	enrichedDn 	      = gseaGeneSigDBDn,
	tableReportGroups = gseaTableReportGroups,
	minSetSize        = 5,
	maxSetSize        = 1000,
	@enabled = runGseaGeneSigDB
)

gseaReportTFTargets = getGSEAReportTFTargets
(
	enrichedUp = gseaTFTargetsUp,
	enrichedDn = gseaTFTargetsDn,
	tableReportGroups = gseaTableReportGroups,
	minSetSize        = 10,
	maxSetSize        = 5000,
	@enabled = runGseaTFTargets
)

gseaReportDSigDB = getGSEAReportDSigDB
(
	enrichedUp = gseaDSigDBUp,
	enrichedDn = gseaDSigDBDn,
	tableReportGroups = gseaTableReportGroups,
	minSetSize        = 3,
	maxSetSize        = 1000,
	@enabled = runGseaDSigDB
)

gseaReportOverlap = getGSEAOverlapReport
(
	enrichedMSigDBUp      = gseaMSigDBUp, 		enrichedMSigDBDn      = gseaMSigDBDn,
	enrichedGeneSigDBUp   = gseaGeneSigDBUp,	enrichedGeneSigDBDn   = gseaGeneSigDBDn,
	enrichedDSigDBUp      = gseaDSigDBUp,   	enrichedDSigDBDn 	  = gseaDSigDBDn,
	enrichedTFTargetsUp   = gseaTFTargetsUp,    enrichedTFTargetsDn   = gseaTFTargetsDn,
	groups 				  = gseaTableReportGroups,
	similarityCutoffsTree = record(
								TumorVsNormalUp = 0.25,	TumorVsNormalDn = 0.1,
								iAMPvsNoniAMPUp = 0.3,	iAMPvsNoniAMPDn = 0.1,
								iAMPspecificUp  = 0.1,	iAMPspecificDn  = 0.1,
								DSvsNonDSUp     = 0.3,	DSvsNonDSDn     = 0.3,
								ERvsNonERUp     = 0.1,	ERvsNonERDn     = 0.1,
								iAMPvsDSUp      = 0.1,	iAMPvsDSDn      = 0.3,
								iAMPvsERUp      = 0.2,	iAMPvsERDn      = 0.1,
								ERvsDSUp        = 0.1,	ERvsDSDn        = 0.2
							),
	sigCutoffs 			  = record(
								TumorVsNormalUp = 1e-5,	TumorVsNormalDn = 0.001,
								iAMPvsNoniAMPUp = 1e-3,	iAMPvsNoniAMPDn = 1e-3,
								iAMPspecificUp  = 1e-3,	iAMPspecificDn  = 1e-3,
								DSvsNonDSUp     = 1e-5,	DSvsNonDSDn     = 1e-2,
								ERvsNonERUp     = 1e-2,	ERvsNonERDn     = 1e-4,
								iAMPvsDSUp      = 1e-2,	iAMPvsDSDn      = 1e-6,
								iAMPvsERUp      = 1e-4,	iAMPvsERDn      = 1e-2,
								ERvsDSUp        = 1e-2,	ERvsDSDn        = 1e-6
							),
	maxRank = 500,
	@enabled = runGseaMSigDB || runGseaGeneSigDB || runGseaDSigDB || runGseaTFTargets
)

combinedReportGsea = LatexCombiner
(
	array = {
		gseaReportMSigDB,
		gseaReportHematologic,
		gseaReportGeneSigDB,
		gseaReportTFTargets,
		gseaReportDSigDB,
		gseaReportOverlap
	}
)

combinedPDFGsea = LatexPDF
(
	document = combinedReportGsea,
	header   = latexHeaderGsea,
	footer   = docTemplate.footer,
	useRefs  = true,
	verbose  = false
)

@out.out.filename = shortName + "-GSEA.pdf"
OUTPUT(combinedPDFGsea.document)

//------------------------------------------------------------------------------------------------
//--- MUTATION REPORT
//------------------------------------------------------------------------------------------------

include "/mnt/projects/generic/scripts/anduril/mutations.and"

mutationReport = MutationReport
(
	alignedBams  = alignedBams,
	sectionTitle = "Mutated genes",
	sectionType  = "section",
	@enabled     = runMutations
)

mutationPDF = LatexPDF
(
	document = mutationReport,
	header   = latexHeaderMutation,
	footer   = docTemplate.footer,
	useRefs  = true,
	verbose  = false,
	@enabled = runMutations
)

@out.out.filename = shortName + "-mutations.pdf"
OUTPUT(mutationPDF.document)

//------------------------------------------------------------------------------------------------
//--- EXCEL FILES WITH DIFFERENTIALLY EXPRESSED GENES
//------------------------------------------------------------------------------------------------

include "degExcel.and"

degExcel = degExcelOutput
(
	degTables   = degCalledLst,
	degAllLst   = degAllLst,
	linkRule    = ensemblRef,
	geneNames   = geneNames,
	geneAnnot   = geneAnnot,
	comparisons  = comparisonGroups,
	fdrCutoff    = 1
)
	
@out.out.filename = shortName + "-DE-genes.xls"
OUTPUT(degExcel.degs)

@out.out.filename = shortName + "-all-genes.xls"
OUTPUT(degExcel.allGenes)

